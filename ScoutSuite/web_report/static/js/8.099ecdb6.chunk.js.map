{"version":3,"sources":["partials/aws/cloudformation.regions.id.stacks.id/Informations/index.js","partials/aws/cloudformation.regions.id.stacks.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["Informations","label","valuePath","renderValue","formatDate","value","name","service","resource","id","className","errorPath","fontSize","isEmpty","map","arn","i","CloudtrailStack","props","data","capabilities","get","policy","title","disabled","renderList","InformationsWrapper","children","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","Policy","policyPath","defaultOpen","hasError","useContext","PartialContext","path_to_issues","some","path","includes","policyTitle","renderJson","json","object","JSON","stringify","replace","renderWithInnerHtml","policyContent","Object","entries","key","trigger","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"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","file":"static/js/8.099ecdb6.chunk.js","sourcesContent":["import React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n\nimport { PartialValue } from '../../../../components/Partial/index';\nimport ResourceLink from '../../../../components/ResourceLink';\nimport { formatDate } from '../../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"ARN\"\n        valuePath=\"arn\"\n      />\n      <PartialValue\n        label=\"Region\"\n        valuePath=\"region\"\n      />\n      <PartialValue\n        label=\"Created on\"\n        valuePath=\"CreationTime\"\n        renderValue={formatDate}\n      />\n      <PartialValue\n        label=\"Role\"\n        valuePath=\"iam_role.name\"\n        renderValue={\n          value => value ? (\n            <>\n              <ResourceLink \n                name={value}\n                service=\"iam\"\n                resource=\"role\"\n                id={value}\n              />\n              <PartialValue\n                className=\"role-icon\"\n                errorPath={value}\n                renderValue={() => <ReportProblemOutlinedIcon fontSize=\"inherit\" />}\n              />\n            </>\n          ) : 'None'\n        }\n      />\n      <PartialValue\n        label=\"Termination protection enabled\"\n        valuePath=\"EnableTerminationProtection\"\n        errorPath=\"cloudformation_stack_no_termination_protection\"\n      />\n      <PartialValue\n        label=\"Configuration has drifted\"\n        valuePath=\"drifted\"\n        errorPath=\"cloudformation_stack_drifted\"\n      />\n      <PartialValue\n        label=\"Deletion policy\"\n        valuePath=\"deletion_policy\"\n        errorPath=\"cloudformation_stack_no_deletion_policy\"\n      />\n      <PartialValue\n        label=\"Notification ARNs\"\n        valuePath=\"notificationARNs\"\n        errorPath=\"cloudformation_stack_lacks_notifications\"\n        renderValue={value => !isEmpty(value) ? (\n          <ul>\n            {value.map((arn, i) => (\n              <li key={i}>\n                {arn}\n              </li>\n            ))}\n          </ul>\n        ) : 'None'}\n      />\n      <PartialValue\n        className=\"stack-description\"\n        valuePath=\"Description\"\n        renderValue={value => value && (\n          <>\n            <h4>Description</h4>\n            {value}\n          </>\n        )}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape, \n  renderList,\n} from '../../../utils/Partials';\nimport { Partial } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport Policy from '../../../components/Partial/Policy';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst CloudtrailStack = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const capabilities = get(data, ['item', 'Capabilities'], []);\n  const policy = get(data, ['item', 'policy']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane\n          title=\"Capabilities\"\n          disabled={isEmpty(capabilities)}\n        >\n          {renderList(capabilities)}\n        </TabPane>\n        <TabPane\n          title=\"Stack Policy\"\n          disabled={isEmpty(policy)}\n        >\n          <Policy policy={policy} />\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nCloudtrailStack.propTypes = propTypes;\n\nexport default CloudtrailStack;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}