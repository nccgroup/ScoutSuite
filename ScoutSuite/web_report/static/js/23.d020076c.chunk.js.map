{"version":3,"sources":["partials/aws/elb.regions.id.vpcs.id.elbs.id/Informations/index.js","partials/aws/elb.regions.id.vpcs.id.elbs.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","utils/Api/index.js"],"names":["Informations","label","valuePath","renderValue","value","map","zone","i","ELBs","props","data","path","get","region","getRegionFromPath","vpcId","getVpcFromPath","useAPI","getRawEndpoint","vpc","loading","isEmpty","item","arn","name","listeners","attributes","securityGroups","instances","subnets","tags","title","Object","entries","port","listener","errorPath","SslPolicy","Protocol","renderAttributes","attribute","join","isObject","isArray","x","Value","Key","key","disabled","renderList","renderSecurityGroupLink","id","service","resource","renderAwsTags","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","match"],"mappings":"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","file":"static/js/23.d020076c.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"ARN\"\n        valuePath=\"arn\"\n      />\n      <PartialValue\n        label=\"VPC\"\n        valuePath=\"vpc\"\n      />\n      <PartialValue\n        label=\"DNS\"\n        valuePath=\"DNSName\"\n      />\n      <PartialValue\n        label=\"Scheme\"\n        valuePath=\"Scheme\"\n      />\n      <PartialValue\n        label=\"Availability zones\"\n        valuePath=\"AvailabilityZones\"\n        renderValue={value => (\n          <ul>\n            {value.map((zone, i) => (\n              <li key={i}>{zone}</li>\n            ))}\n          </ul>\n        )}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isObject from 'lodash/isObject';\nimport isArray from 'lodash/isArray';\n\nimport { useAPI } from '../../../api/useAPI';\nimport { getVpcFromPath, getRegionFromPath } from '../../../utils/Api';\nimport { getRawEndpoint } from '../../../api/paths';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { \n  partialDataShape,\n  renderList,\n  renderSecurityGroupLink,\n  renderAwsTags,\n} from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport ResourceLink from '../../../components/ResourceLink';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst ELBs = props => {\n  const { data } = props;\n\n  const path = get(data, ['item', 'path'], '');\n  const region = getRegionFromPath(path);\n  const vpcId = getVpcFromPath(path);\n\n  const { data: vpc, loading } = useAPI(\n    getRawEndpoint(`services.elb.regions.${region}.vpcs.${vpcId}`)\n  );\n\n  if (isEmpty(data.item) || loading) return null;\n\n  if (!isEmpty(vpc)) {\n    data.item.arn = vpc.arn;\n    data.item.vpc = `${vpc.name} (${vpcId})`;\n  }\n\n  const listeners = get(data, ['item', 'listeners'], {});\n  const attributes = get(data, ['item', 'attributes'], {});\n  const securityGroups = get(data, ['item', 'security_groups'], []);\n  const instances = get(data, ['item', 'instances'], []);\n  const subnets = get(data, ['item', 'Subnets'], []);\n  const tags = get(data, ['item', 'tags'], []);\n\n  const renderAttributes = (attribute, path = []) => {\n    const label = path.join('.');\n    if (!isObject(attribute)) {\n      return (\n        <li key={label}>\n          <PartialValue\n            label={label}\n            value={attribute}\n            errorPath={`attributes.${label}`}\n          />\n        </li>\n      );\n    }\n  \n    if (isArray(attribute)) {\n      return (\n        <li key={label}>\n          <PartialValue\n            label={label}\n            value={attribute}\n            renderValue={value => value.map((x, i) => (\n              <ul key={i}>\n                {renderAttributes(x.Value, [x.Key])}\n              </ul>\n            ))}\n          />\n        </li>\n      ); \n    }\n  \n    return Object.entries(attribute).map(([key, value]) => (\n      renderAttributes(value, [...path, key])\n    ));\n  };\n\n  const renderInstanceLink = id => (\n    <ResourceLink \n      service=\"ec2\"\n      resource=\"instances\"\n      id={id}\n    />\n  );\n\n  const renderSubnetLink = id => (\n    <ResourceLink \n      service=\"vpc\"\n      resource=\"subnets\"\n      id={id}\n    />\n  );\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <div>\n        <TabsMenu>\n          <TabPane title=\"Listeners\">\n            <ul>\n              {Object.entries(listeners).map(([port, listener], i) => (\n                <li key={i}>\n                  <PartialValue\n                    value={{\n                      port,\n                      ...listener,\n                    }}\n                    errorPath={`listeners.${port}`}\n                    renderValue={value => value.SslPolicy ? (\n                      <>\n                        {`${value.port} (${value.Protocol}, `}\n                        <PartialValue\n                          value={value.SslPolicy}\n                          errorPath={`listeners.${value.port}.SslPolicy`}\n                        />\n                        {')'}\n                      </>\n                    ) : (\n                      `${value.port} (${value.Protocol})`\n                    )}\n                  />\n                </li>\n              ))}\n            </ul>\n          </TabPane>\n          <TabPane title=\"Attributes\">\n            <ul>\n              {renderAttributes(attributes)}\n            </ul>\n          </TabPane>\n          <TabPane\n            title=\"Security Groups\"\n            disabled={isEmpty(securityGroups)}\n          >\n            {renderList(securityGroups, '', renderSecurityGroupLink)}\n          </TabPane>\n          <TabPane\n            title=\"Destination\"\n            disabled={isEmpty(instances) && isEmpty(subnets)}\n          >\n            <div>\n              {!isEmpty(instances) && (\n                <>\n                  <h5>Instances</h5>\n                  {renderList(instances, '', renderInstanceLink)}\n                </>\n              )}\n              {!isEmpty(subnets) && (\n                <>\n                  <h5>Subnets</h5>\n                  {renderList(subnets, '', renderSubnetLink)}\n                </>\n              )}\n            </div>\n          </TabPane>\n          {!isEmpty(tags) && (\n            <TabPane title=\"Tags\">\n              {renderAwsTags(tags)}\n            </TabPane>\n          )}\n        </TabsMenu>\n      </div>\n    </Partial>\n  );\n};\n\nELBs.propTypes = propTypes;\n\nexport default ELBs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import get from 'lodash/get';\n\n\nexport const getRegionFromPath = path => get(path.match(/regions\\.([^.]*)/), 1);\n\nexport const getVpcFromPath = path => get(path.match(/vpcs\\.([^.]*)/), 1);\n"],"sourceRoot":""}