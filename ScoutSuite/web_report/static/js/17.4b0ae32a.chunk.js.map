{"version":3,"sources":["partials/aws/ec2.regions.id.vpcs.id.instances.id/Informations/index.js","partials/aws/ec2.regions.id.vpcs.id.instances.id/NetworkInterfaces/index.js","partials/aws/ec2.regions.id.vpcs.id.instances.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","utils/Api/index.js"],"names":["Informations","label","valuePath","renderValue","valueOrNone","convertBoolToEnable","formatDate","NetworkInterfaces","props","interfaces","Object","entries","map","i","id","networkInterface","Description","value","Association","PublicIp","PublicDnsName","Attachment","InstanceId","isEmpty","Ipv6Addresses","address","Ipv6Address","PrivateIpAddresses","Primary","PrivateIpAddress","Groups","renderList","renderSecurityGroupLink","Ec2Instance","data","path","get","region","getRegionFromPath","vpcId","getVpcFromPath","useAPI","getRawEndpoint","vpc","loading","networkInterfaces","metadata","userdata","secrets","item","className","title","disabled","HttpEndpoint","errorPath","HttpTokens","split","key","values","InformationsWrapper","children","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","match"],"mappings":"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","file":"static/js/17.4b0ae32a.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial';\nimport { \n  valueOrNone,\n  convertBoolToEnable,\n  formatDate,\n} from '../../../../utils/Partials';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"ARN\"\n        valuePath=\"arn\"\n      />\n      <PartialValue\n        label=\"ID\"\n        valuePath=\"id\"\n      />\n      <PartialValue\n        label=\"Region\"\n        valuePath=\"region\"\n      />\n      <PartialValue\n        label=\"Availability Zone\"\n        valuePath=\"availability_zone\"\n      />\n      <PartialValue\n        label=\"VPC\"\n        valuePath=\"vpc\"\n      />\n      <PartialValue\n        label=\"Reservation ID\"\n        valuePath=\"reservation_id\"\n      />\n      <PartialValue\n        label=\"IAM role\"\n        valuePath=\"iam_role\"\n        renderValue={valueOrNone}\n      />\n      <PartialValue\n        label=\"Monitoring\"\n        valuePath=\"monitoring_enabled\"\n        renderValue={convertBoolToEnable}\n      />\n      <PartialValue\n        label=\"Access Key Name\"\n        valuePath=\"KeyName\"\n      />\n      <PartialValue\n        label=\"State\"\n        valuePath=\"State.Name\"\n      />\n      <PartialValue\n        label=\"Instance Type\"\n        valuePath=\"InstanceType\"\n      />\n      <PartialValue\n        label=\"Up Since\"\n        valuePath=\"LaunchTime\"\n        renderValue={formatDate}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  renderList, \n  renderSecurityGroupLink \n} from '../../../../utils/Partials';\nimport DetailedValue from '../../../../components/DetailedValue';\n\n\nconst propTypes = {\n  interfaces: PropTypes.object,\n};\n\nconst NetworkInterfaces = props => {\n  const { interfaces } = props;\n\n  return (\n    Object.entries(interfaces).map(([id, networkInterface], i) => (\n      <div key={i}>\n        <h5>{id}</h5>\n        <ul>\n          {networkInterface.Description && (\n            <li>\n              <DetailedValue\n                label=\"Description\"\n                value={networkInterface.Description}\n              />\n            </li>\n          )}\n          {networkInterface.Association && (\n            <>\n              <li>\n                <DetailedValue\n                  label=\"Public IP\"\n                  value={networkInterface.Association.PublicIp}\n                />\n              </li>\n              <li>\n                <DetailedValue\n                  label=\"Public DNS\"\n                  value={networkInterface.Association.PublicDnsName}\n                />\n              </li>\n            </>\n          )}\n          {networkInterface.Attachment && (\n            <li>\n              <DetailedValue\n                label=\"Attached to Instance\"\n                value={networkInterface.Attachment.InstanceId}\n              />\n            </li>\n          )}\n          {!isEmpty(networkInterface.Ipv6Addresses) && (\n            <>\n              <li>IPv6 Addresses:</li>\n              <ul>\n                {networkInterface.Ipv6Addresses.map((address, i) => (\n                  <li key={i}>\n                    {address.Ipv6Address}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n          {networkInterface.PrivateIpAddresses.map((address, i) => (\n            <li key={i}>\n              <DetailedValue\n                label={address.Primary ? \n                  'Primary Private IP' : 'Private IP'\n                }\n                value={address.PrivateIpAddress}\n              />\n            </li>\n          ))}\n          {!isEmpty(networkInterface.Groups) && (\n            <li>\n              <DetailedValue\n                label=\"Security Groups\"\n                value={renderList(networkInterface.Groups, '', renderSecurityGroupLink)}\n              />\n            </li>\n          )}\n        </ul>\n      </div>\n    ))\n  );\n};\n\nNetworkInterfaces.propTypes = propTypes;\n\nexport default NetworkInterfaces;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { useAPI } from '../../../api/useAPI';\nimport { getVpcFromPath, getRegionFromPath } from '../../../utils/Api';\nimport { getRawEndpoint } from '../../../api/paths';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { partialDataShape } from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport NetworkInterfaces from './NetworkInterfaces';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Ec2Instance = props => {\n  const { data } = props;\n\n  const path = get(data, ['item', 'path'], '');\n  const region = getRegionFromPath(path);\n  const vpcId = getVpcFromPath(path);\n\n  const { data: vpc, loading } = useAPI(\n    getRawEndpoint(`services.ec2.regions.${region}.vpcs.${vpcId}.name`)\n  );\n\n  if (!data || loading) return null;\n\n  const networkInterfaces = get(data, ['item', 'network_interfaces']);\n  const metadata = get(data, ['item', 'metadata_options']);\n  const userdata = get(data, ['item', 'user_data']) || '';\n  const secrets = get(data, ['item', 'user_data_secrets']);\n\n  if (!isEmpty(vpc)) {\n    data.item.vpc = `${vpc} (${vpcId})`;\n    data.item.region = region;\n  }\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <div className=\"ec2-instances\">\n        <TabsMenu>\n          <TabPane\n            title=\"Network Interfaces\"\n            disabled={isEmpty(networkInterfaces)}\n          >\n            <NetworkInterfaces interfaces={networkInterfaces} />\n          </TabPane>\n          <TabPane\n            title=\"Metadata Options\"\n            disabled={isEmpty(metadata)}\n          >\n            <div>\n              <PartialValue\n                label=\"Endpoint\"\n                value={metadata.HttpEndpoint}\n                errorPath=\"metadata_options\"\n              />\n              <PartialValue\n                label=\"HTTP Tokens\"\n                value={metadata.HttpTokens}\n                errorPath=\"metadata_options\"\n              />\n            </div>\n          </TabPane>\n          <TabPane\n            title=\"User Data\"\n            disabled={isEmpty(userdata)}\n          >\n            <div>\n              <h5>Data</h5>\n              {userdata.split('\\n').map((data, i) => (\n                <code key={i}>\n                  {data}\n                </code>\n              ))}\n              {!isEmpty(secrets) && (\n                <div>\n                  <h5 className=\"secrets-header\">\n                    <PartialValue\n                      value=\"Potential Secrets\"\n                      errorPath=\"potential_secrets\"\n                    />\n                  </h5>\n                  <ul>\n                    {Object.entries(secrets).map(([key, values], i) => (\n                      <li key={i}>\n                        {key}\n                        <ul>\n                          {values.map((value, i) => (\n                            <li key={i}>\n                              <code>{value}</code>\n                            </li>\n                          ))}\n                        </ul>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          </TabPane>\n        </TabsMenu>\n      </div>\n    </Partial>\n  );\n};\n\nEc2Instance.propTypes = propTypes;\n\nexport default Ec2Instance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import get from 'lodash/get';\n\n\nexport const getRegionFromPath = path => get(path.match(/regions\\.([^.]*)/), 1);\n\nexport const getVpcFromPath = path => get(path.match(/vpcs\\.([^.]*)/), 1);\n"],"sourceRoot":""}