{"version":3,"sources":["partials/aws/vpc.regions.id.vpcs.id.subnets.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["RegionDomain","props","data","id","get","instances","flowLogs","label","valuePath","renderValue","name","valueOrNone","convertBoolToEnable","title","disabled","isEmpty","renderList","service","resource","errorPath","message","filter","value","renderFlowlogLink","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx"],"mappings":"qNAkHeA,UAvFM,SAAAC,GAAU,IACrBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAKC,IAAIF,EAAM,CAAC,OAAQ,OACxBG,EAAYD,IAAIF,EAAM,CAAC,OAAQ,aAAc,IAC7CI,EAAWF,IAAIF,EAAM,CAAC,OAAQ,cAUpC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEK,MAAM,OACNC,UAAU,OACVC,YACE,SAAAC,GAAI,OAAIA,IAASP,EAAK,OAASO,KAGnC,cAAC,IAAD,CACEH,MAAM,KACNC,UAAU,OAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,UAEZ,cAAC,IAAD,CACED,MAAM,oBACNC,UAAU,qBAEZ,cAAC,IAAD,CACED,MAAM,aACNC,UAAU,cAEZ,cAAC,IAAD,CACED,MAAM,kBACNC,UAAU,cACVC,YAAaE,MAEf,cAAC,IAAD,CACEJ,MAAM,sBACNC,UAAU,sBACVC,YAAaG,SAIjB,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,MAAM,YACNC,SAAUC,IAAQV,GAFpB,SAIGW,YAAWX,EAAW,IAnDJ,SAAAF,GAAE,OAC3B,cAAC,IAAD,CACEc,QAAQ,MACRC,SAAS,YACTf,GAAIA,SAiDF,cAAC,IAAD,CAASU,MAAM,YAAf,SACGE,IAAQT,GACP,cAAC,IAAD,CACEa,UAAU,aACVV,YAAa,kBACX,cAAC,IAAD,CACEW,QAAQ,qCAKdJ,YACEV,EAASe,QAAO,SAAAC,GAAK,MAAqB,kBAAVA,KAChC,GACAC,e,wDC/ECC,IAda,SAAAvB,GAAU,IAC5BwB,EAAaxB,EAAbwB,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAAC1B,GAAW,IAE/BY,EAKEZ,EALFY,MACAe,EAIE3B,EAJF2B,WACAd,EAGEb,EAHFa,SACAe,EAEE5B,EAFF4B,QACAJ,EACExB,EADFwB,SAN8B,EASIK,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGlB,EACAqB,IAAWH,GAAYI,QAG1BtB,EAGJ,OACE,cAAC,IAAkBuB,SAAnB,CAA4Bd,MAAOU,EAAnC,SACE,cAAC,IAAD,CACEnB,MAAOoB,EACPP,UAAWW,IAAG,mBAAoBN,GAClCH,WAAYA,EACZd,SAAUA,EACVe,QAASA,EALX,SAOGJ","file":"static/js/42.75e84740.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  convertBoolToEnable,\n  valueOrNone,\n  renderList,\n  renderFlowlogLink,\n} from '../../../utils/Partials';\nimport { \n  Partial, \n  PartialValue,\n} from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport ResourceLink from '../../../components/ResourceLink';\nimport WarningMessage from '../../../components/WarningMessage';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst RegionDomain = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const id = get(data, ['item', 'id']);\n  const instances = get(data, ['item', 'instances'], []);\n  const flowLogs = get(data, ['item', 'flow_logs']);\n\n  const renderInstanceLink = id => (\n    <ResourceLink \n      service=\"ec2\"\n      resource=\"instances\"\n      id={id}\n    />\n  );\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Name\"\n          valuePath=\"name\"\n          renderValue={\n            name => name === id ? 'None' : name\n          }\n        />\n        <PartialValue\n          label=\"ID\"\n          valuePath=\"id\"\n        />\n        <PartialValue\n          label=\"VPC ID\"\n          valuePath=\"VpcId\"\n        />\n        <PartialValue\n          label=\"Availability Zone\"\n          valuePath=\"AvailabilityZone\"\n        />\n        <PartialValue\n          label=\"CIDR Block\"\n          valuePath=\"CidrBlock\"\n        />\n        <PartialValue\n          label=\"IPv6 CIDR Block\"\n          valuePath=\"CidrBlockv6\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue\n          label=\"Public IP on Launch\"\n          valuePath=\"MapPublicIpOnLaunch\"\n          renderValue={convertBoolToEnable}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane \n          title=\"Instances\"\n          disabled={isEmpty(instances)}\n        >\n          {renderList(instances, '', renderInstanceLink)}\n        </TabPane>\n        <TabPane title=\"Flow Logs\">\n          {isEmpty(flowLogs) ? (\n            <PartialValue\n              errorPath=\"no_flowlog\"\n              renderValue={() => (\n                <WarningMessage\n                  message=\"This subnet has no flow logs.\"\n                />\n              )}\n            />\n          ) : (\n            renderList(\n              flowLogs.filter(value => typeof value === 'string'), \n              '',\n              renderFlowlogLink,\n            )\n          )}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRegionDomain.propTypes = propTypes;\n\nexport default RegionDomain;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}