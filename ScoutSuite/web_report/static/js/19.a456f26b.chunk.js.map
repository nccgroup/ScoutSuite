{"version":3,"sources":["partials/aws/sqs.regions.id.queues.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["Queues","props","data","policy","get","label","valuePath","errorPath","renderValue","valueOrNone","value","formatDate","parseInt","title","disabled","isEmpty","Statement","policyPath","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","Policy","name","defaultOpen","hasError","useContext","PartialContext","path_to_issues","some","path","includes","policyTitle","renderJson","json","object","JSON","stringify","replace","renderWithInnerHtml","policyContent","Object","entries","map","i","key","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"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","file":"static/js/19.a456f26b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape, \n  valueOrNone,\n  formatDate,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Policy from '../../../components/Partial/Policy';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Queues = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const policy = get(data, ['item', 'Policy']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Region\"\n          valuePath=\"region\"\n        />\n        <PartialValue\n          label=\"ARN\"\n          valuePath=\"arn\"\n        />\n        <PartialValue\n          label=\"KMS Master Key ID\"\n          valuePath=\"kms_master_key_id\"\n          errorPath=\"server-side-encryption-disabled\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue\n          label=\"Creation Time\"\n          valuePath=\"CreatedTimestamp\"\n          renderValue={value => formatDate(parseInt(value))}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane \n          title=\"Access Control Policy\"\n          disabled={isEmpty(policy.Statement)}\n        >\n          <Policy \n            policy={policy}\n            policyPath=\"Policy\"\n          />\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nQueues.propTypes = propTypes;\n\nexport default Queues;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}