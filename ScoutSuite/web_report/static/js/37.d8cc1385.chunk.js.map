{"version":3,"sources":["partials/aws/redshift.regions.id.vpcs.id.security_groups/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["SecurityGroups","props","data","ipRanges","get","groups","label","valuePath","title","disabled","isEmpty","map","range","i","CIDRIP","value","Status","name","EC2SecurityGroupName","UserId","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","errorPath","inline","tooltip","tooltipProps","renderValue","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon"],"mappings":"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","file":"static/js/37.d8cc1385.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { partialDataShape } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst SecurityGroups = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const ipRanges = get(data, ['item', 'IPRanges']);\n  const groups = get(data, ['item', 'EC2SecurityGroups']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Descripition\"\n          valuePath=\"Description\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane \n          title=\"Rules\"\n          disabled={isEmpty(ipRanges) && isEmpty(groups)}\n        >\n          {!isEmpty(ipRanges) && (\n            <ul>\n              IP Addresses:\n              {ipRanges.map((range, i) => (\n                <li key={i}>\n                  <PartialValue\n                    label={range.CIDRIP}\n                    value={range.Status}\n                  />\n                </li>\n              ))}\n            </ul>\n          )}\n          {!isEmpty(groups) && (\n            <ul>\n              EC2 Security Groups:\n              {groups.map((\n                {\n                  CIDRIP,\n                  EC2SecurityGroupName: name,\n                  UserId,\n                  Status,\n                }, i\n              ) => (\n                <li key={i}>\n                  <PartialValue\n                    label={CIDRIP}\n                    value={`${name} (AWS account ID: ${UserId}): ${Status}`}\n                  />\n                </li>\n              ))}\n            </ul>\n          )}\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nSecurityGroups.propTypes = propTypes;\n\nexport default SecurityGroups;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}