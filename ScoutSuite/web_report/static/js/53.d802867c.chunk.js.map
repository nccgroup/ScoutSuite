{"version":3,"sources":["partials/aws/iam.policies.id/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["IamPolicies","props","data","arn","get","policy","attachedEntities","title","name","policyPath","defaultOpen","Object","entries","map","i","type","entities","renderList","renderResourceLink","PartialTabPane","isSelected","disabled","onClick","children","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","className","cx","Policy","hasError","useContext","PartialContext","path_to_issues","some","path","includes","isEmpty","policyTitle","renderJson","json","errorPath","object","JSON","stringify","replace","renderValue","renderWithInnerHtml","policyContent","key","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"2LAuDeA,UArCK,SAAAC,GAAU,IACpBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAMC,IAAIF,EAAM,CAAC,OAAQ,QACzBG,EAASD,IAAIF,EAAM,CAAC,OAAQ,kBAAmB,IAC/CI,EAAmBF,IAAIF,EAAM,CAAC,OAAQ,eAAgB,IAE5D,OACE,cAAC,IAAD,CAASA,KAAMA,EAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASK,MAAM,SAAf,SACE,cAAC,IAAD,CACEC,KAAML,EACNE,OAAQA,EACRI,WAAW,iBACXC,aAAW,MAGf,cAAC,IAAD,CAASH,MAAM,oBAAf,SACE,6BACGI,OAAOC,QAAQN,GAAkBO,KAAI,WAAmBC,GAAnB,uBAAEC,EAAF,KAAQC,EAAR,YACpC,+BACGD,EACAE,YAAWD,EAAU,GAAIE,YAAmB,MAAOH,MAF7CD,iB,+LCgBRK,G,OAtCQ,SAAClB,GAAW,IAE/BM,EAKEN,EALFM,MACAa,EAIEnB,EAJFmB,WACAC,EAGEpB,EAHFoB,SACAC,EAEErB,EAFFqB,QACAC,EACEtB,EADFsB,SAN8B,EASIC,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGlB,EACAqB,IAAWH,GAAYI,QAG1BtB,EAGJ,OACE,cAAC,IAAkBuB,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACEnB,MAAOoB,EACPK,UAAWC,IAAG,mBAAoBR,GAClCL,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGC,S,wNCnBHW,G,OAAS,SAAAjC,GAAU,IAErBO,EAIEP,EAJFO,KACAH,EAGEJ,EAHFI,OACAI,EAEER,EAFFQ,WACAC,EACET,EADFS,YAIIyB,EADqBC,qBAAWC,KAA9BC,eACwBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SAAShC,MAE3D,GAAIiC,IAAQrC,GAAS,OAAO,KAE5B,IAAMsC,EACJ,oBAAIX,UAAU,eAAd,SACGxB,IASCoC,EAAa,SAACC,EAAMC,GAAP,OACjB,cAAC,IAAD,CACEf,OAPgBgB,EAOGF,EANrBG,KAAKC,UAAUF,EAAQ,KAAM,GAC1BG,QAAQ,MAAO,UACfA,QAAQ,OAAQ,UAKjBJ,UAAWA,EACXK,YAAa,SAAApB,GAAK,OAChBqB,YACErB,MAXY,IAAAgB,GAiBdM,EACJ,iCACG,IACA1C,OAAOC,QAAQP,GAAQQ,KAAI,WAAeC,GAAf,uBAAEwC,EAAF,KAAOvB,EAAP,YAC1B,sBAEEC,UAAWC,IAAG,CAAE,OAA4B,kBAAXF,IAFnC,qBAIOuB,EAJP,UAKW,cAARA,EACC,yCACG,uBACAvB,EAAMlB,KAAI,SAACkC,EAAQjC,GAAT,OACT,cAAC,IAAD,CAEEyC,QACE,qCACE,cAAC,IAAD,CAAgBC,SAAS,YACzB,+BAAO,aAGXC,gBACE,cAAC,IAAD,CAAgBD,SAAS,YAE3BE,eAAgB,EAChBC,MAAM,EAZR,SAcGf,EAAWG,EAAD,UAAYtC,EAAZ,sBAAoCK,KAb1CA,MAJX,OAuBA,mCACG8B,EAAWb,KAGfjB,EAAI8C,IAAKvD,GAAU,GAAK,IACzB,yBAjCKS,MAoCR,OAIL,OACE,qBAAKkB,UAAU,SAAf,SACGxB,EACC,eAAC,IAAD,CACEqD,gBAAiBnD,GAAeyB,EADlC,UAGE,cAAC,IAAD,CACE2B,WAAY,cAAC,IAAD,IADd,SAGGnB,IAEH,cAAC,IAAD,UACGU,OAILA,MAORnB,EAAO6B,aA5Gc,CACnBrD,aAAa,GA6GAwB,O","file":"static/js/53.d802867c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport { \n  partialDataShape,\n  renderList,\n  renderResourceLink,\n} from '../../../utils/Partials';\nimport { Partial } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport Policy from '../../../components/Partial/Policy';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst IamPolicies = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const arn = get(data, ['item', 'arn']);\n  const policy = get(data, ['item', 'PolicyDocument'], {});\n  const attachedEntities = get(data, ['item', 'attached_to'], {});\n\n  return (\n    <Partial data={data}>\n      <TabsMenu>\n        <TabPane title=\"Policy\">\n          <Policy\n            name={arn}\n            policy={policy}\n            policyPath=\"PolicyDocument\"\n            defaultOpen\n          />\n        </TabPane>\n        <TabPane title=\"Attached Entities\">\n          <ul>\n            {Object.entries(attachedEntities).map(([type, entities], i) => (\n              <li key={i}>\n                {type}\n                {renderList(entities, '', renderResourceLink('iam', type))}\n              </li>\n            ))}\n          </ul>\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nIamPolicies.propTypes = propTypes;\n\nexport default IamPolicies;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}