{"version":3,"sources":["partials/azure/postgresqldatabase.subscriptions.id.servers.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Servers","props","rules","serverKey","data","item","get","label","valuePath","errorPath","title","Object","entries","postgresql_firewall_rules","id","length","map","key","rule","baseErrorPath","path","name","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx"],"mappings":"2LAwGeA,UA3DC,SAAAC,GAAU,IA5BGC,EAAOC,EA8B1BC,EAASH,EAATG,KACFC,EAAOC,IAAIF,EAAM,CAAC,QAAS,IAEjC,OAAKA,EAGH,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,MAAM,yBACNC,UAAU,SACZ,cAAC,IAAD,CACED,MAAM,oCACNC,UAAU,oBACZ,cAAC,IAAD,CACED,MAAM,kCACNC,UAAU,SACZ,cAAC,IAAD,CACED,MAAM,yBACNC,UAAU,wBACVC,UAAU,iCACZ,cAAC,IAAD,CACEF,MAAM,mCACNC,UAAU,wBACVC,UAAU,iCACZ,cAAC,IAAD,CACEF,MAAM,sCACNC,UAAU,2BACVC,UAAU,oCACZ,cAAC,IAAD,CACEF,MAAM,gCACNC,UAAU,qBACVC,UAAU,8BACZ,cAAC,IAAD,CACEF,MAAM,yCACNC,UAAU,8BACVC,UAAU,uCACZ,cAAC,IAAD,CACEF,MAAM,sCACNC,UAAU,2BACVC,UAAU,uCAId,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,MAAM,iBAAf,SACE,8BA5EmBR,EA6EIS,OAAOC,QAAQP,EAAKQ,2BA7EjBV,EA6E6CE,EAAKS,GA5E/EZ,GAAUA,EAAMa,OAEdb,EAAMc,KAAI,YAAkB,IAAD,mBAAfC,EAAe,KAAVC,EAAU,KAC1BC,EAAa,qCAAiChB,EAAjC,sCAAwEc,GAE3F,OACE,cAAC,IAAD,CAAgBG,KAAI,oCAA+BH,GAAnD,SACE,+BACE,4BAAIC,EAAKG,OACT,cAAC,IAAD,CACEd,MAAM,yBACNC,UAAU,WACVW,cAAeA,IAGjB,cAAC,IAAD,CACEZ,MAAM,uBACNC,UAAU,SACVW,cAAeA,QAZ0CD,EAAKJ,OANpC,kDAgClB,O,wDC1BLQ,IAda,SAAArB,GAAU,IAC5BsB,EAAatB,EAAbsB,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACxB,GAAW,IAE/BS,EAKET,EALFS,MACAgB,EAIEzB,EAJFyB,WACAC,EAGE1B,EAHF0B,SACAC,EAEE3B,EAFF2B,QACAL,EACEtB,EADFsB,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGpB,EACAuB,IAAWH,GAAYI,QAG1BxB,EAGJ,OACE,cAAC,IAAkByB,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACErB,MAAOsB,EACPR,UAAWa,IAAG,mBAAoBP,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL","file":"static/js/48.3e4c007a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport {\n  Partial,\n  PartialSection,\n  PartialValue,\n} from '../../../components/Partial';\nimport { partialDataShape } from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\nconst renderFirewallRules = (rules, serverKey) => {\n  if (!rules || !rules.length) return <span>None</span>;\n\n  return rules.map(([key, rule]) => {\n    const baseErrorPath = `postgresqldatabase.servers.${serverKey}.postgresql_firewall_rules.${key}`;\n\n    return (\n      <PartialSection path={`postgresql_firewall_rules.${key}`} key={rule.id}>\n        <li>\n          <b>{rule.name}</b>\n          <PartialValue\n            label=\"Firewall rule start IP\"\n            valuePath=\"start_ip\"\n            baseErrorPath={baseErrorPath}\n          />\n\n          <PartialValue\n            label=\"Firewall rule end IP\"\n            valuePath=\"end_ip\"\n            baseErrorPath={baseErrorPath}\n          />\n\n        </li>\n      </PartialSection>\n    );\n  });\n};\n\nconst Servers = props => {\n\n  const { data } = props;\n  const item = get(data, ['item'], {});\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"PostgreSQL Server Name\"\n          valuePath=\"name\" />\n        <PartialValue\n          label=\"Server SSL connection enforcement\"\n          valuePath=\"ssl_enforcement\" />\n        <PartialValue\n          label=\"Log checkpoint server parameter\"\n          valuePath=\"name\" />\n        <PartialValue\n          label=\"PostgreSQL Server Name\"\n          valuePath=\"log_checkpoints.value\"\n          errorPath=\"server_log_checkpoints_value\" />\n        <PartialValue\n          label=\"Log connections server parameter\"\n          valuePath=\"log_connections.value\"\n          errorPath=\"server_log_connections_value\" />\n        <PartialValue\n          label=\"Log disconnections server parameter\"\n          valuePath=\"log_disconnections.value\"\n          errorPath=\"server_log_disconnections_value\" />\n        <PartialValue\n          label=\"Log duration server parameter\"\n          valuePath=\"log_duration.value\"\n          errorPath=\"server_log_duration_value\" />\n        <PartialValue\n          label=\"Connection throttling server parameter\"\n          valuePath=\"connection_throttling.value\"\n          errorPath=\"server_connection_throttling_value\" />\n        <PartialValue\n          label=\"Log retention days server parameter\"\n          valuePath=\"log_retention_days.value\"\n          errorPath=\"server_log_retention_days_value\" />\n\n\n      </InformationsWrapper>\n      <TabsMenu>\n        <TabPane title=\"Firewall Rules\">\n          <ul>\n            {renderFirewallRules(Object.entries(item.postgresql_firewall_rules), item.id)}\n          </ul>\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nServers.propTypes = propTypes;\n\nexport default Servers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}