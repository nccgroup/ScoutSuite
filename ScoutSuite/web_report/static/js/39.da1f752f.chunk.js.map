{"version":3,"sources":["partials/aws/rds.regions.id.vpcs.id.snapshots.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Snapshots","props","data","attributes","get","isCluster","label","valuePath","renderValue","formatDate","errorPath","convertBoolToEnable","title","disabled","isEmpty","map","attribute","i","AttributeName","value","AttributeValues","values","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx"],"mappings":"oMAsGeA,UAlFG,SAAAC,GAAU,IAClBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAaC,IAAIF,EAAM,CAAC,OAAQ,eAChCG,EAAYD,IAAIF,EAAM,CAAC,OAAQ,eAErC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACGG,EACC,cAAC,IAAD,CACEC,MAAM,aACNC,UAAU,wBAGZ,cAAC,IAAD,CACED,MAAM,eACNC,UAAU,yBAGd,cAAC,IAAD,CACED,MAAM,mBACNC,UAAU,eAEZ,cAAC,IAAD,CACED,MAAM,gBACNC,UAAU,qBACVC,YAAaC,MAEf,cAAC,IAAD,CACEH,MAAM,aACNC,UAAU,YACVG,UAAU,yBACVF,YAAaG,OAEbN,GACA,cAAC,IAAD,CACEC,MAAM,eACNC,UAAU,uBAKhB,cAAC,IAAD,UACE,cAAC,IAAD,CACEK,MAAM,aACNC,SAAUC,IAAQX,GAFpB,SAIE,6BACGA,EAAWY,KAAI,SAACC,EAAWC,GAAZ,OACd,6BACE,cAAC,IAAD,CACEX,MAAOU,EAAUE,cACjBC,MAAOH,EAAUI,gBACjBV,UAAS,qBAAgBO,GACzBT,YAAa,SAAAa,GAAM,OACjB,6BACIP,IAAQO,GAOR,0CANAA,EAAON,KAAI,SAACI,EAAOF,GAAR,OACT,6BACGE,GADMF,YATZA,iB,wDChDRK,IAda,SAAArB,GAAU,IAC5BsB,EAAatB,EAAbsB,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACxB,GAAW,IAE/BW,EAKEX,EALFW,MACAc,EAIEzB,EAJFyB,WACAb,EAGEZ,EAHFY,SACAc,EAEE1B,EAFF0B,QACAJ,EACEtB,EADFsB,SAN8B,EASIK,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGjB,EACAoB,IAAWH,GAAYI,QAG1BrB,EAGJ,OACE,cAAC,IAAkBsB,SAAnB,CAA4Bf,MAAOW,EAAnC,SACE,cAAC,IAAD,CACElB,MAAOmB,EACPP,UAAWW,IAAG,mBAAoBN,GAClCH,WAAYA,EACZb,SAAUA,EACVc,QAASA,EALX,SAOGJ","file":"static/js/39.da1f752f.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  formatDate,\n  convertBoolToEnable, \n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Snapshots = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const attributes = get(data, ['item', 'attributes']);\n  const isCluster = get(data, ['item', 'is_cluster']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        {isCluster ? (\n          <PartialValue\n            label=\"DB Cluster\"\n            valuePath=\"DBClusterIdentifier\"\n          />\n        ) : (\n          <PartialValue\n            label=\"RDS Instance\"\n            valuePath=\"DBInstanceIdentifier\"\n          />\n        )}\n        <PartialValue\n          label=\"Cluster Snapshot\"\n          valuePath=\"is_cluster\"\n        />\n        <PartialValue\n          label=\"Creation Time\"\n          valuePath=\"SnapshotCreateTime\"\n          renderValue={formatDate}\n        />\n        <PartialValue\n          label=\"Encryption\"\n          valuePath=\"Encrypted\"\n          errorPath=\"snapshot-not-encrypted\"\n          renderValue={convertBoolToEnable}\n        />\n        {!isCluster && (\n          <PartialValue\n            label=\"Option Group\"\n            valuePath=\"OptionGroupName\"\n          />\n        )}\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane \n          title=\"Attributes\"\n          disabled={isEmpty(attributes)}\n        >\n          <ul>\n            {attributes.map((attribute, i) => (\n              <li key={i}>\n                <PartialValue\n                  label={attribute.AttributeName}\n                  value={attribute.AttributeValues}\n                  errorPath={`attributes.${i}`}\n                  renderValue={values => (\n                    <ul>\n                      {!isEmpty(values) ? (\n                        values.map((value, i) => (\n                          <li key={i}>\n                            {value}\n                          </li>\n                        ))\n                      ) : (\n                        <li>No value</li>\n                      )}\n                    </ul>\n                  )}\n                />\n              </li>\n            ))}\n          </ul>\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nSnapshots.propTypes = propTypes;\n\nexport default Snapshots;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}