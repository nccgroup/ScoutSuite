{"version":3,"sources":["partials/aws/cloudwatch.regions.id.alarms.id/Informations/index.js","partials/aws/cloudwatch.regions.id.alarms.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Informations","label","valuePath","className","MetricFilters","props","data","actions","get","alarms","title","isEmpty","errorPath","renderValue","message","renderList","disabled","InformationsWrapper","children","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx"],"mappings":"kJAwCeA,UAjCM,WACnB,OACE,qCACE,cAAC,IAAD,CACEC,MAAM,OACNC,UAAU,SAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,WAEZ,cAAC,IAAD,CACED,MAAM,kBACNC,UAAU,mBAEZ,cAAC,IAAD,CACED,MAAM,QACNC,UAAU,eAEZ,sBAAKC,UAAU,gBAAf,UACE,cAAC,IAAD,CACEF,MAAM,SACNC,UAAU,cAEZ,sCACA,cAAC,IAAD,CACEA,UAAU,uB,gJC6BLE,UA1CO,SAAAC,GAAU,IACtBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAUC,IAAIF,EAAM,CAAC,OAAQ,iBAC7BG,EAASD,IAAIF,EAAM,CAAC,OAAQ,2BAA4B,IAE9D,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,cAAC,IAAD,UACE,cAAC,UAAD,MAGF,eAAC,IAAD,WACE,cAAC,IAAD,CAASI,MAAM,gBAAf,SACIC,IAAQJ,GAGR,cAAC,IAAD,CACEK,UAAU,YACVC,YAAa,kBACX,cAAC,IAAD,CACEC,QAAQ,uDANdC,YAAWR,KAYf,cAAC,IAAD,CACEG,MAAM,4BACNM,SAAUL,IAAQF,GAFpB,SAIGM,YAAWN,a,wDC7BPQ,IAda,SAAAZ,GAAU,IAC5Ba,EAAab,EAAba,SAER,OACE,sBAAKf,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCe,O,qNCyCQC,G,OAtCQ,SAACd,GAAW,IAE/BK,EAKEL,EALFK,MACAU,EAIEf,EAJFe,WACAJ,EAGEX,EAHFW,SACAK,EAEEhB,EAFFgB,QACAH,EACEb,EADFa,SAN8B,EASII,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGb,EACAgB,IAAWH,GAAYI,QAG1BjB,EAGJ,OACE,cAAC,IAAkBkB,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACEd,MAAOe,EACPtB,UAAW2B,IAAG,mBAAoBP,GAClCH,WAAYA,EACZJ,SAAUA,EACVK,QAASA,EALX,SAOGH,S","file":"static/js/18.2b5a7485.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\n\nimport './style.scss';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"Name\"\n        valuePath=\"name\"\n      />\n      <PartialValue\n        label=\"Region\"\n        valuePath=\"region\"\n      />\n      <PartialValue\n        label=\"Actions Enabled\"\n        valuePath=\"ActionsEnabled\"\n      />\n      <PartialValue\n        label=\"State\"\n        valuePath=\"StateValue\"\n      />\n      <div className=\"alarm-metrics\">\n        <PartialValue\n          label=\"Metric\"\n          valuePath=\"Namespace\"\n        />\n        <span>::</span>\n        <PartialValue\n          valuePath=\"MetricName\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  renderList,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport WarningMessage from '../../../components/WarningMessage';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst MetricFilters = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const actions = get(data, ['item', 'AlarmActions']);\n  const alarms = get(data, ['item', 'InsufficientDataActions'], []);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n      \n      <TabsMenu>\n        <TabPane title=\"Alarm Actions\">\n          {!isEmpty(actions) ? (\n            renderList(actions)\n          ) : (\n            <PartialValue\n              errorPath=\"NoActions\"\n              renderValue={() => (\n                <WarningMessage\n                  message=\"No actions have been configured for this alarm.\"\n                />\n              )}\n            />\n          )}\n        </TabPane>\n        <TabPane \n          title=\"Insufficient Data Actions\"\n          disabled={isEmpty(alarms)}\n        >\n          {renderList(alarms)}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nMetricFilters.propTypes = propTypes;\n\nexport default MetricFilters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}