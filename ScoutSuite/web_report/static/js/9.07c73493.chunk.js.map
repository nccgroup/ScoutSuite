{"version":3,"sources":["partials/aws/iam.users.id/AuthenticationMethods/index.js","partials/aws/iam.users.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["AuthenticationMethods","props","mfaDevices","accessKeys","loginProfile","className","label","valuePath","renderValue","value","convertBoolToYesOrNo","isEmpty","errorPath","map","mfa","i","SerialNumber","get","key","AccessKeyId","Status","formatDate","CreateDate","length","message","IamUsers","data","groups","inline_policies","policies","tags","valueOrNone","title","disabled","renderList","Object","values","id","service","resource","entries","policy","name","PolicyDocument","policyPath","renderPolicyLink","renderAwsTags","InformationsWrapper","children","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","Policy","defaultOpen","hasError","useContext","PartialContext","path_to_issues","some","path","includes","policyTitle","renderJson","json","object","JSON","stringify","replace","renderWithInnerHtml","policyContent","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"8MA4GeA,UArFe,SAAAC,GAAU,IAEpCC,EAGED,EAHFC,WACAC,EAEEF,EAFFE,WACAC,EACEH,EADFG,aAGF,OACE,sBAAKC,UAAU,yBAAf,UACE,cAAC,IAAD,CACEC,MAAM,mBACNC,UAAU,eACVC,YAAa,SAAAC,GAAK,OAAIC,aAAsBC,IAAQF,OAEtD,cAAC,IAAD,CACEH,MAAM,uBACNC,UAAU,aACVK,UAAU,cACVJ,YAAa,SAAAC,GAAK,OAAIC,aAAsBC,IAAQF,QAEpDE,IAAQT,IACR,6BACGA,EAAWW,KAAI,SAACC,EAAKC,GAAN,OACd,6BACE,cAAC,IAAD,CACET,MAAM,gBACNG,MAAOK,EAAIE,gBAHND,QASf,cAAC,IAAD,CACET,MAAM,cACNC,UAAU,aACVK,UAAU,oBACVJ,YAAa,SAAAC,GAAK,OAAIQ,IAAIR,EAAO,SAAU,OAE3CE,IAAQR,IACR,6BACGA,EAAWU,KAAI,SAACK,EAAKH,GAAN,OACd,6BACE,cAAC,IAAD,CACEH,UAAS,qBAAgBG,GACzBP,YAAa,kBACX,qBAAIH,UAAU,YAAd,UACGa,EAAIC,YACL,6BAAKD,EAAIE,SACT,kDAAmBC,YAAWH,EAAII,sBAPjCP,QAgBf,sBAAKV,UAAU,WAAf,WACIM,IAAQP,IAAiBD,EAAWoB,OAAS,GAC7C,cAAC,IAAD,CACEX,UAAU,oBACVJ,YAAa,kBACX,cAAC,IAAD,CACEgB,QAAQ,uEAKfrB,EAAWoB,OAAS,GACnB,cAAC,IAAD,CACEX,UAAU,2BACVJ,YAAa,kBACX,cAAC,IAAD,CACEgB,QAAQ,+D,gKCWTC,UAlFE,SAAAxB,GAAU,IACjByB,EAASzB,EAATyB,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAASV,IAAIS,EAAM,CAAC,OAAQ,UAAW,IACvCE,EAAkBX,IAAIS,EAAM,CAAC,OAAQ,mBAAoB,IACzDG,EAAWZ,IAAIS,EAAM,CAAC,OAAQ,YAAa,IAC3CI,EAAOb,IAAIS,EAAM,CAAC,OAAQ,QAAS,IAUzC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEpB,MAAM,MACNC,UAAU,MACVC,YAAauB,MAEf,cAAC,IAAD,CACEzB,MAAM,gBACNC,UAAU,aACVC,YAAaa,SAIjB,eAAC,IAAD,WACE,cAAC,IAAD,CAASW,MAAM,yBAAf,SACE,cAAC,UAAD,CACE9B,WAAYe,IAAIS,EAAM,CAAC,OAAQ,eAC/BvB,WAAYc,IAAIS,EAAM,CAAC,OAAQ,eAC/BtB,aAAca,IAAIS,EAAM,CAAC,OAAQ,qBAGrC,cAAC,IAAD,CACEM,MAAM,SACNC,SAAUtB,IAAQgB,GAFpB,SAIGO,YAAWC,OAAOC,OAAOT,GAAS,IAnCnB,SAAAU,GAAE,OACxB,cAAC,IAAD,CACEC,QAAQ,MACRC,SAAS,SACTF,GAAIA,SAkCF,cAAC,IAAD,CACEL,MAAM,kBACNC,SAAUtB,IAAQiB,GAFpB,SAIE,mCACGO,OAAOK,QAAQZ,GAAiBf,KAAI,WAAeE,GAAf,uBAAEsB,EAAF,KAAMI,EAAN,YACnC,cAAC,IAAD,CAEEC,KAAMD,EAAOC,KACbD,OAAQA,EAAOE,eACfC,WAAU,0BAAqBP,EAArB,oBAHLtB,UAQb,cAAC,IAAD,CACEiB,MAAM,mBACNC,SAAUtB,IAAQkB,GAFpB,SAIGK,YAAWC,OAAOC,OAAOP,GAAW,GAAIgB,OAE3C,cAAC,IAAD,CACEb,MAAM,OACNC,SAAUtB,IAAQmB,GAFpB,SAIGgB,YAAchB,a,wDC1EViB,IAda,SAAA9C,GAAU,IAC5B+C,EAAa/C,EAAb+C,SAER,OACE,sBAAK3C,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACC2C,O,qNCyCQC,G,OAtCQ,SAAChD,GAAW,IAE/B+B,EAKE/B,EALF+B,MACAkB,EAIEjD,EAJFiD,WACAjB,EAGEhC,EAHFgC,SACAkB,EAEElD,EAFFkD,QACAH,EACE/C,EADF+C,SAN8B,EASII,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGrB,EACAwB,IAAWH,GAAYI,QAG1BzB,EAGJ,OACE,cAAC,IAAkB0B,SAAnB,CAA4BjD,MAAO6C,EAAnC,SACE,cAAC,IAAD,CACEtB,MAAOuB,EACPlD,UAAWsD,IAAG,mBAAoBN,GAClCH,WAAYA,EACZjB,SAAUA,EACVkB,QAASA,EALX,SAOGH,S,wNCnBHY,G,OAAS,SAAA3D,GAAU,IAErByC,EAIEzC,EAJFyC,KACAD,EAGExC,EAHFwC,OACAG,EAEE3C,EAFF2C,WACAiB,EACE5D,EADF4D,YAIIC,EADqBC,qBAAWC,KAA9BC,eACwBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SAASxB,MAE3D,GAAIjC,IAAQ8B,GAAS,OAAO,KAE5B,IAAM4B,EACJ,oBAAIhE,UAAU,eAAd,SACGqC,IASC4B,EAAa,SAACC,EAAM3D,GAAP,OACjB,cAAC,IAAD,CACEH,OAPgB+D,EAOGD,EANrBE,KAAKC,UAAUF,EAAQ,KAAM,GAC1BG,QAAQ,MAAO,UACfA,QAAQ,OAAQ,UAKjB/D,UAAWA,EACXJ,YAAa,SAAAC,GAAK,OAChBmE,YACEnE,MAXY,IAAA+D,GAiBdK,EACJ,iCACG,IACA1C,OAAOK,QAAQC,GAAQ5B,KAAI,WAAeE,GAAf,uBAAEG,EAAF,KAAOT,EAAP,YAC1B,sBAEEJ,UAAWsD,IAAG,CAAE,OAA4B,kBAAXlD,IAFnC,qBAIOS,EAJP,UAKW,cAARA,EACC,yCACG,uBACAT,EAAMI,KAAI,SAAC2D,EAAQzD,GAAT,OACT,cAAC,IAAD,CAEE+D,QACE,qCACE,cAAC,IAAD,CAAgBC,SAAS,YACzB,+BAAO,aAGXC,gBACE,cAAC,IAAD,CAAgBD,SAAS,YAE3BE,eAAgB,EAChBC,MAAM,EAZR,SAcGZ,EAAWE,EAAD,UAAY5B,EAAZ,sBAAoC7B,KAb1CA,MAJX,OAuBA,mCACGuD,EAAW7D,KAGfM,EAAIoE,IAAK1C,GAAU,GAAK,IACzB,yBAjCK1B,MAoCR,OAIL,OACE,qBAAKV,UAAU,SAAf,SACGqC,EACC,eAAC,IAAD,CACE0C,gBAAiBvB,GAAeC,EADlC,UAGE,cAAC,IAAD,CACEuB,WAAY,cAAC,IAAD,IADd,SAGGhB,IAEH,cAAC,IAAD,UACGQ,OAILA,MAORjB,EAAO0B,aA5Gc,CACnBzB,aAAa,GA6GAD,O","file":"static/js/9.07c73493.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport {\n  convertBoolToYesOrNo, \n  formatDate,\n} from '../../../../utils/Partials';\nimport { PartialValue } from '../../../../components/Partial';\nimport DetailedValue from '../../../../components/DetailedValue';\n\nimport './style.scss';\nimport WarningMessage from '../../../../components/WarningMessage';\n\n\nconst propTypes = {\n  mfaDevices: PropTypes.array.isRequired,\n  accessKeys: PropTypes.array.isRequired,\n  loginProfile: PropTypes.object.isRequired,\n};\n\n\nconst AuthenticationMethods = props => {\n  const { \n    mfaDevices, \n    accessKeys,\n    loginProfile,\n  } = props;\n\n  return (\n    <div className=\"authentication-methods\">\n      <PartialValue\n        label=\"Password enabled\"\n        valuePath=\"LoginProfile\"\n        renderValue={value => convertBoolToYesOrNo(!isEmpty(value))}\n      />\n      <PartialValue\n        label=\"Multi-Factor enabled\"\n        valuePath=\"MFADevices\"\n        errorPath=\"mfa_enabled\"\n        renderValue={value => convertBoolToYesOrNo(!isEmpty(value))}\n      />\n      {!isEmpty(mfaDevices) && (\n        <ul>\n          {mfaDevices.map((mfa, i) => (\n            <li key={i}>\n              <DetailedValue \n                label=\"Serial Number\"\n                value={mfa.SerialNumber}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n      <PartialValue\n        label=\"Access Keys\"\n        valuePath=\"AccessKeys\"\n        errorPath=\"multiple_api_keys\"\n        renderValue={value => get(value, 'length', 0)}\n      />\n      {!isEmpty(accessKeys) && (\n        <ul>\n          {accessKeys.map((key, i) => (\n            <li key={i}>\n              <PartialValue\n                errorPath={`AccessKeys.${i}`}\n                renderValue={() => (\n                  <ul className=\"key-infos\">\n                    {key.AccessKeyId}\n                    <li>{key.Status}</li>\n                    <li>{`Created on ${formatDate(key.CreateDate)}`}</li>\n                  </ul>\n                )}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n\n      <div className=\"warnings\">\n        {!isEmpty(loginProfile) && accessKeys.length > 0 && (\n          <PartialValue\n            errorPath=\"password_and_keys\"\n            renderValue={() => (\n              <WarningMessage \n                message=\"Review the need for password-based and key-based authentication\" \n              />\n            )}\n          />\n        )}\n        {accessKeys.length > 1 && (\n          <PartialValue \n            errorPath=\"multiple_active_api_keys\"\n            renderValue={() => (\n              <WarningMessage \n                message=\"Review the need for multiple active access keys\" \n              />\n            )}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nAuthenticationMethods.propTypes = propTypes;\n\nexport default AuthenticationMethods;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  formatDate,\n  valueOrNone,\n  renderList,\n  renderPolicyLink,\n  renderAwsTags,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport AuthenticationMethods from './AuthenticationMethods';\nimport Policy from '../../../components/Partial/Policy';\nimport ResourceLink from '../../../components/ResourceLink';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst IamUsers = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const groups = get(data, ['item', 'groups'], {});\n  const inline_policies = get(data, ['item', 'inline_policies'], {});\n  const policies = get(data, ['item', 'policies'], {});\n  const tags = get(data, ['item', 'Tags'], []);\n\n  const renderGroupLink = id => (\n    <ResourceLink\n      service=\"iam\"\n      resource=\"groups\"\n      id={id}\n    />\n  );\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue \n          label=\"ARN\" \n          valuePath=\"arn\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue \n          label=\"Creation Date\" \n          valuePath=\"CreateDate\"\n          renderValue={formatDate}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Authentication Methods\">\n          <AuthenticationMethods \n            mfaDevices={get(data, ['item', 'MFADevices'])}\n            accessKeys={get(data, ['item', 'AccessKeys'])}\n            loginProfile={get(data, ['item', 'LoginProfile'])}\n          />\n        </TabPane>\n        <TabPane \n          title=\"Groups\"\n          disabled={isEmpty(groups)}\n        >\n          {renderList(Object.values(groups), '', renderGroupLink)}\n        </TabPane>\n        \n        <TabPane \n          title=\"Inline Policies\"\n          disabled={isEmpty(inline_policies)}\n        >\n          <>\n            {Object.entries(inline_policies).map(([id, policy], i) => (\n              <Policy\n                key={i}\n                name={policy.name}\n                policy={policy.PolicyDocument}\n                policyPath={`inline_policies.${id}.PolicyDocument`}\n              />\n            ))}\n          </>\n        </TabPane>\n        <TabPane \n          title=\"Managed Policies\"\n          disabled={isEmpty(policies)}\n        >\n          {renderList(Object.values(policies), '', renderPolicyLink)}\n        </TabPane>\n        <TabPane \n          title=\"Tags\"\n          disabled={isEmpty(tags)}\n        >\n          {renderAwsTags(tags)}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nIamUsers.propTypes = propTypes;\n\nexport default IamUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}