{"version":3,"sources":["partials/aws/iam.groups.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["IamGroups","props","data","users","get","inline_policies","policies","label","valuePath","renderValue","valueOrNone","formatDate","title","isEmpty","errorPath","message","renderList","id","service","resource","disabled","Object","entries","map","i","policy","name","PolicyDocument","policyPath","renderPolicyLink","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx","Policy","defaultOpen","hasError","useContext","PartialContext","path_to_issues","some","path","includes","policyTitle","renderJson","json","object","JSON","stringify","replace","renderWithInnerHtml","policyContent","key","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"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","file":"static/js/16.db19c147.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  formatDate,\n  valueOrNone,\n  renderList,\n  renderPolicyLink,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport WarningMessage from '../../../components/WarningMessage';\nimport Policy from '../../../components/Partial/Policy';\nimport ResourceLink from '../../../components/ResourceLink';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst IamGroups = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const users = get(data, ['item', 'users'], []);\n  const inline_policies = get(data, ['item', 'inline_policies'], {});\n  const policies = get(data, ['item', 'policies'], []);\n\n  const renderUserLink = id => (\n    <ResourceLink\n      service=\"iam\"\n      resource=\"users\"\n      id={id}\n    />\n  );\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue \n          label=\"ARN\" \n          valuePath=\"arn\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue \n          label=\"Creation Date\" \n          valuePath=\"CreateDate\"\n          renderValue={formatDate}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Members\">\n          {!isEmpty(users) ? (\n            renderList(users, '', renderUserLink)\n          ) : (\n            <PartialValue\n              errorPath=\"ALL\"\n              renderValue={() => (\n                <WarningMessage message=\"This group has no members.\"/>\n              )}\n            />\n          )}\n        </TabPane>\n        <TabPane \n          title=\"Inline Policies\"\n          disabled={isEmpty(inline_policies)}\n        >\n          <>\n            {Object.entries(inline_policies).map(([id, policy], i) => (\n              <Policy\n                key={i}\n                name={policy.name}\n                policy={policy.PolicyDocument}\n                policyPath={`inline_policies.${id}.PolicyDocument`}\n              />\n            ))}\n          </>\n        </TabPane>\n        <TabPane \n          title=\"Managed Policies\"\n          disabled={isEmpty(policies)}\n        >\n          {renderList(policies, '', renderPolicyLink)}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nIamGroups.propTypes = propTypes;\n\nexport default IamGroups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}