{"version":3,"sources":["partials/aws/vpc.regions.id.vpcs.id.subnets.id/FlowLogs/index.js","partials/aws/vpc.regions.id.vpcs.id.subnets.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/WarningMessage/index.js"],"names":["FlowLogs","props","flowLogs","className","isEmpty","errorPath","renderValue","message","renderResourcesAsList","RegionDomain","data","id","get","instances","label","valuePath","name","valueOrNone","convertBoolToEnable","title","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","value","String","isArray","map","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon","fontSize","WarningMessage"],"mappings":"sLAsCeA,UAvBE,SAAAC,GAAU,IACjBC,EAAaD,EAAbC,SAER,OACE,qBAAKC,UAAU,YAAf,SACGC,IAAQF,GACP,cAAC,IAAD,CACEG,UAAU,aACVC,YAAa,kBACX,cAAC,IAAD,CACEC,QAAQ,qCAKdC,YAAsBN,EAAU,iB,yIC0DzBO,UA/DM,SAAAR,GAAU,IACrBS,EAAST,EAATS,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAKC,IAAIF,EAAM,CAAC,OAAQ,OACxBG,EAAYD,IAAIF,EAAM,CAAC,OAAQ,cAC/BR,EAAWU,IAAIF,EAAM,CAAC,OAAQ,cAEpC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEI,MAAM,OACNC,UAAU,OACVT,YACE,SAAAU,GAAI,OAAIA,IAASL,EAAK,OAASK,KAGnC,cAAC,IAAD,CACEF,MAAM,KACNC,UAAU,OAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,UAEZ,cAAC,IAAD,CACED,MAAM,oBACNC,UAAU,qBAEZ,cAAC,IAAD,CACED,MAAM,aACNC,UAAU,cAEZ,cAAC,IAAD,CACED,MAAM,kBACNC,UAAU,cACVT,YAAaW,MAEf,cAAC,IAAD,CACEH,MAAM,sBACNC,UAAU,sBACVT,YAAaY,SAIjB,eAAC,IAAD,YACId,IAAQS,IACR,cAAC,IAAD,CAASM,MAAM,YAAf,SACGX,YAAsBK,EAAW,UAGtC,cAAC,IAAD,CAASM,MAAM,YAAf,SACE,cAAC,UAAD,CAAUjB,SAAUA,c,iCC/E9B,0HAEMkB,EAAgB,CACpBC,cAAe,GACfC,KAAM,IAGKC,EAAiBC,IAAMC,cAAcL,GACrCM,EAAqBF,IAAMC,cAAc,IACzCE,EAAoBH,IAAMC,eAAc,gB,sMC8CtCG,EAvCM,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EACdC,qBAAWC,KAAxCC,EAD2C,EAC3CA,WAAYC,EAD+B,EAC/BA,aACZC,EAAoBC,cAApBD,gBAgBFE,EAAQ1B,IAAIsB,EAAY,CAACL,EAASC,GAAU,IAAIS,SAASR,GAE/D,OACE,cAACS,EAAA,EAAD,CACErB,MAAM,wBAAwBsB,UAAU,MACxCC,OAAK,EAFP,SAGE,cAACC,EAAA,EAAD,CACEC,SAAUN,EACVO,KAAK,QACLC,UAAW,cAAC,IAAD,IACX3C,UAAU,gBACV4C,QAzBM,WACVZ,EAAaN,EAASC,EAASC,GAC/BK,EACE,0DACA,CACEY,QAAS,UACTC,aAAc,CACZC,SAAU,SACVC,WAAY,YAYhB,oB,QCWAC,EAAe,SAAAnD,GAAU,IA4BzBoD,EA1BFvC,EAUEb,EAVFa,MACAwC,EASErD,EATFqD,UACAvC,EAQEd,EARFc,UACAV,EAOEJ,EAPFI,UACAF,EAMEF,EANFE,UACAoD,EAKEtD,EALFsD,OACAC,EAIEvD,EAJFuD,QACAC,EAGExD,EAHFwD,aACAnD,EAEEL,EAFFK,YACAoD,EACEzD,EADFyD,kBAGIC,EAASC,cACTC,EAAM7B,qBAAWT,KACjBuC,EAAW9B,qBAAWN,KACtBqC,EAAgB/B,qBAAWL,KAE3BqC,EAAgBC,YAAYP,GAAqBI,EAAU/C,GAC7DmD,EAAQ5D,EACVL,EAAMiE,OAAStD,IAAIiD,EAAIvC,KAAM0C,EAAe/D,EAAMiE,SAG/B,mBAAVA,IACTA,EAAQC,OAAOD,IAIb7D,GAEFgD,GADce,IAAQ/D,GAAaA,EAAY,CAACA,IACzBgE,KAAI,SAAAtC,GAAI,OAC7BkC,YAAYP,GAAqBI,EAAU/B,MAG7CsB,EAAiB,CAACW,GAGpB,IAAMM,EAAWjB,EAAekB,MAAK,SAAAxC,GAAI,OACvC8B,EAAIW,eAAejC,SAASR,MAExB0C,EAAQZ,EAAIY,MAQlB,GANAC,qBAAU,WACJJ,GACFP,EAAcU,KAEf,CAACA,SAEUE,IAAVT,GAAiC,OAAVA,EACzB,OAAO,KAGT,IAAMU,EACJ,cAAC,EAAD,CACE/C,QAAS8B,EAAO9B,QAASC,QAAS6B,EAAO7B,QACzCC,KAAI,UAAK8B,EAAI9B,KAAT,YAAiBsB,EAAe,MAGlCwB,EACJ,uBAAM1E,UAAW2E,IAAGR,GAAYQ,IAAG,QAASL,IAA5C,UACGP,EACAI,GAAYM,KAIjB,OACE,cAACG,EAAA,EAAD,CACE5E,UAAW2E,IAAG3E,EAAW,gBAAiB,CAAEoD,WAC5CzC,MAAOA,EACPwC,UAAWA,EACXY,MACEV,EACE,cAAChB,EAAA,EAAD,yBAASrB,MAAO+C,GAAWT,GAA3B,aACGoB,KAGHA,KAQVzB,EAAa4B,aApGQ,CACnBlE,MAAO,GACPwC,UAAW,KACXY,MAAO,KACPnD,UAAW,KACXV,UAAW,KACXkD,QAAQ,EACRC,SAAS,EACTC,aAAc,CACZwB,WAAY,IACZxC,UAAW,aAEbnC,YAAa,SAAA4D,GAAK,OAAIA,IA0FTd,O,qECjHA8B,IAdQ,SAACjF,GAAW,IACzB8B,EAAmB9B,EAAnB8B,KAAMoD,EAAalF,EAAbkF,SAERrB,EAAW9B,qBAAWN,KAE5B,OACE,cAAC,IAAmB0D,SAApB,CAA6BlB,MAAOD,YAAYH,EAAU/B,GAA1D,SACGoD,M,sKCOQE,G,OAdQ,SAACpF,GAAW,IACzBS,EAAmBT,EAAnBS,KAAMyE,EAAalF,EAAbkF,SAId,OAFAG,QAAQC,KAAK,eAAgB7E,GAG3B,cAAC,IAAe0E,SAAhB,CAAyBlB,MAAOxD,EAAhC,SACGyE,M,iGCMQK,IAda,SAAAvF,GAAU,IAC5BkF,EAAalF,EAAbkF,SAER,OACE,sBAAKhF,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCgF,O,uNCyCQM,G,OAtCQ,SAACxF,GAAW,IAE/BkB,EAKElB,EALFkB,MACAuE,EAIEzF,EAJFyF,WACA9C,EAGE3C,EAHF2C,SACAG,EAEE9C,EAFF8C,QACAoC,EACElF,EADFkF,SAN8B,EASIQ,mBAAS,IATb,mBASzBC,EATyB,KASb7B,EATa,KAW1B8B,EAAgBD,EAElB,qCACGzE,EACA2E,IAAWF,GAAYG,QAG1B5E,EAGJ,OACE,cAAC,IAAkBiE,SAAnB,CAA4BlB,MAAOH,EAAnC,SACE,cAAC,IAAD,CACE5C,MAAO0E,EACP1F,UAAW2E,IAAG,mBAAoBc,GAClCF,WAAYA,EACZ9C,SAAUA,EACVG,QAASA,EALX,SAOGoC,S,qFCnCHH,G,OAAe,CACnBe,KAAM,cAAC,IAAD,CAA2BC,SAAS,cAGtCC,EAAiB,SAAAhG,GAAU,IAE7BM,EAGEN,EAHFM,QACAwF,EAEE9F,EAFF8F,KACA5F,EACEF,EADFE,UAGF,OACE,sBAAKA,UAAW2E,IAAG,kBAAmB3E,GAAtC,UACG4F,EACAxF,MAMP0F,EAAejB,aAAeA,EAEfiB,O","file":"static/js/15.18a3936c.chunk.js","sourcesContent":["import React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\n\nimport { PartialValue } from '../../../../components/Partial';\nimport { renderResourcesAsList } from '../../../../utils/Partials';\nimport WarningMessage from '../../../../components/WarningMessage';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  flowLogs: PropTypes.array.isRequired,\n};\n\nconst FlowLogs = props => {\n  const { flowLogs } = props;\n\n  return ( \n    <div className=\"flow-logs\">\n      {isEmpty(flowLogs) ? (\n        <PartialValue\n          errorPath=\"no_flowlog\"\n          renderValue={() => (\n            <WarningMessage\n              message=\"This subnet has no flow logs.\"\n            />\n          )}\n        />\n      ) : (\n        renderResourcesAsList(flowLogs, 'FlowLogId')\n      )}\n    </div>\n  );\n};\n\nFlowLogs.propTypes = propTypes;\n\nexport default FlowLogs;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  convertBoolToEnable,\n  valueOrNone,\n  renderResourcesAsList,\n} from '../../../utils/Partials';\nimport { \n  Partial, \n  PartialValue,\n} from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport FlowLogs from './FlowLogs';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst RegionDomain = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const id = get(data, ['item', 'id']);\n  const instances = get(data, ['item', 'instances']);\n  const flowLogs = get(data, ['item', 'flow_logs']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Name\"\n          valuePath=\"name\"\n          renderValue={\n            name => name === id ? 'None' : name\n          }\n        />\n        <PartialValue\n          label=\"ID\"\n          valuePath=\"id\"\n        />\n        <PartialValue\n          label=\"VPC ID\"\n          valuePath=\"VpcId\"\n        />\n        <PartialValue\n          label=\"Availability Zone\"\n          valuePath=\"AvailabilityZone\"\n        />\n        <PartialValue\n          label=\"CIDR Block\"\n          valuePath=\"CidrBlock\"\n        />\n        <PartialValue\n          label=\"IPv6 CIDR Block\"\n          valuePath=\"CidrBlockv6\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue\n          label=\"Public IP on Launch\"\n          valuePath=\"MapPublicIpOnLaunch\"\n          renderValue={convertBoolToEnable}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        {!isEmpty(instances) &&(\n          <TabPane title=\"Instances\">\n            {renderResourcesAsList(instances, 'name')}\n          </TabPane>\n        )}\n        <TabPane title=\"Flow Logs\">\n          <FlowLogs flowLogs={flowLogs} />\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRegionDomain.propTypes = propTypes;\n\nexport default RegionDomain;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  message: PropTypes.string.isRequired,\n  icon: PropTypes.element,\n  className: PropTypes.string,\n};\n\nconst defaultProps = {\n  icon: <ReportProblemOutlinedIcon fontSize=\"inherit\" />\n};\n\nconst WarningMessage = props => {\n  const { \n    message, \n    icon,\n    className,\n  } = props;\n\n  return (\n    <div className={cx('warning-message', className)}>\n      {icon}\n      {message}\n    </div>\n  );\n};\n\nWarningMessage.propTypes = propTypes;\nWarningMessage.defaultProps = defaultProps;\n\nexport default WarningMessage;\n"],"sourceRoot":""}