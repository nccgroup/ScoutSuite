{"version":3,"sources":["partials/aws/vpc.regions.id.vpcs.id.network_acls.id/RulesTable/index.js","partials/aws/vpc.regions.id.vpcs.id.network_acls.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/WarningMessage/index.js"],"names":["RulesTable","props","rules","type","className","Object","entries","map","rule_id","rule","value","errorPath","port_range","protocol","CidrBlock","RuleAction","RegionDomain","data","get","subnets","label","valuePath","title","isEmtpy","renderValue","message","renderResourcesAsList","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon","fontSize","WarningMessage"],"mappings":"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","file":"static/js/14.8e24a553.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialValue } from '../../../../components/Partial';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  rules: PropTypes.object.isRequired,\n  type: PropTypes.oneOf([\n    'egress', \n    'ingress'\n  ]).isRequired,\n};\n\nconst RulesTable = props => {\n  const {\n    rules,\n    type,\n  } = props;\n\n  return (\n    <table className=\"rules-table\">\n      <thead>\n        <tr>\n          <th>Rule Number</th>\n          <th>Port</th>\n          <th>Protocol</th>\n          <th>IP Address</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(rules[type]).map(([rule_id, rule]) => (\n          <tr key={rule_id}>\n            <td>\n              <PartialValue\n                value={rule_id}\n                errorPath={`${type}.${rule_id}`}\n              />\n            </td>\n            <td>\n              <PartialValue\n                value={rule.port_range}\n                errorPath={`${type}.${rule_id}`}\n              />\n            </td>\n            <td>\n              <PartialValue\n                value={rule.protocol}\n                errorPath={`${type}.${rule_id}`}\n              />\n            </td>\n            <td>\n              <PartialValue\n                value={rule.CidrBlock}\n                errorPath={`${type}.${rule_id}`}\n              />\n              \n            </td>\n            <td>\n              <PartialValue\n                value={rule.RuleAction}\n                errorPath={`${type}.${rule_id}`}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nRulesTable.propTypes = propTypes;\n\nexport default RulesTable;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmtpy from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  renderResourcesAsList,\n} from '../../../utils/Partials';\nimport { \n  Partial, \n  PartialValue,\n} from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport RulesTable from './RulesTable';\nimport WarningMessage from '../../../components/WarningMessage';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst RegionDomain = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const rules = get(data, ['item', 'rules']);\n  const subnets = get(data, ['item', 'Associations']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"ID\"\n          valuePath=\"id\"\n        />\n        <PartialValue\n          label=\"Default\"\n          valuePath=\"IsDefault\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Egress Rules\">\n          <RulesTable \n            rules={rules}\n            type=\"egress\"\n          />\n        </TabPane>\n        <TabPane title=\"Ingress Rules\">\n          <RulesTable \n            rules={rules}\n            type=\"ingress\"\n          />\n        </TabPane>\n        <TabPane title=\"Associated Subnets\">\n          {!isEmtpy(subnets) ? (\n            renderResourcesAsList(subnets, 'SubnetId')\n          ) : (\n            <PartialValue \n              valuePath=\"IsDefault\"\n              errorPath=\"unused\"\n              renderValue={value => (\n                !value && (\n                  <WarningMessage \n                    message=\"This network ACL is not the VPC's default NACL and is not associated with any existing VPC.\"\n                  />\n                )\n              )}\n            />\n          )}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRegionDomain.propTypes = propTypes;\n\nexport default RegionDomain;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  message: PropTypes.string.isRequired,\n  icon: PropTypes.element,\n  className: PropTypes.string,\n};\n\nconst defaultProps = {\n  icon: <ReportProblemOutlinedIcon fontSize=\"inherit\" />\n};\n\nconst WarningMessage = props => {\n  const { \n    message, \n    icon,\n    className,\n  } = props;\n\n  return (\n    <div className={cx('warning-message', className)}>\n      {icon}\n      {message}\n    </div>\n  );\n};\n\nWarningMessage.propTypes = propTypes;\nWarningMessage.defaultProps = defaultProps;\n\nexport default WarningMessage;\n"],"sourceRoot":""}