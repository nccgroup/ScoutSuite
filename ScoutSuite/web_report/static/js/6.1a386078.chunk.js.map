{"version":3,"sources":["partials/aws/s3.buckets.id/AccessControlList/index.js","partials/aws/s3.buckets.id/Informations/index.js","partials/aws/s3.buckets.id/Keys/index.js","partials/aws/s3.buckets.id/PoliciesAccessTable/index.js","partials/aws/s3.buckets.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["AccessControlList","ctx","useContext","PartialContext","basePath","PartialPathContext","value","get","item","className","Object","keys","map","id","valuePath","tooltip","errorPath","renderValue","convertBoolToCheckmark","Informations","label","formatDate","convertBoolToEnable","path","name","PoliciesAccessTable","props","columnName","entries","accessGroup","policies","inline_policies","i","policy_id","policy","rowSpan","length","toString","Bucket","data","isEmpty","title","InformationsWrapper","children","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","Policy","policyPath","defaultOpen","hasError","path_to_issues","some","includes","policyTitle","renderJson","json","object","JSON","stringify","replace","renderWithInnerHtml","policyContent","key","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"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","file":"static/js/6.1a386078.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport get from 'lodash/get';\n\nimport { PartialContext, PartialPathContext } from '../../../../components/Partial/context';\nimport { PartialValue } from '../../../../components/Partial';\nimport { convertBoolToCheckmark } from '../../../../utils/Partials';\n\n\nconst AccessControlList = () => {\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const value = get(ctx.item, basePath);  \n\n  return (\n    <table className=\"acl-table\">\n      <thead>\n        <tr>\n          <th/>\n          <th>List</th>\n          <th>Upload/Delete</th>\n          <th>View Permissions</th>\n          <th>Edit Permissions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(value).map(id => (\n          <tr key={id}>\n            <td>\n              <PartialValue \n                valuePath={`${id}.DisplayName`} \n                tooltip\n              />\n            </td>\n            <td>\n              <PartialValue \n                valuePath={`${id}.permissions.read`}\n                errorPath={`${id}.read`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n            <td>\n              <PartialValue \n                valuePath={`${id}.permissions.read_acp`}\n                errorPath={`${id}.read_acp`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n            <td>\n              <PartialValue \n                valuePath={`${id}.permissions.write`}\n                errorPath={`${id}.write`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n            <td>\n              <PartialValue \n                valuePath={`${id}.permissions.write_acp`}\n                errorPath={`${id}.write_acp`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n          </tr>\n        ))}\n        \n      </tbody>\n    </table>\n  );\n};\n\nexport default AccessControlList;\n","import React from 'react';\n\nimport { PartialValue, PartialSection } from '../../../../components/Partial/index';\nimport { convertBoolToEnable, formatDate } from '../../../../utils/Partials';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue \n        label=\"ARN\" \n        valuePath=\"arn\" \n      />\n      <PartialValue \n        label=\"Region\" \n        valuePath=\"region\" \n      />\n      <PartialValue \n        label=\"Creation Date\" \n        valuePath=\"CreationDate\" \n        renderValue={formatDate}\n      />\n      <PartialValue \n        label=\"Logging\" \n        valuePath=\"logging\" \n        renderValue={convertBoolToEnable} \n      />\n      <PartialValue \n        label=\"Default Encryption\" \n        valuePath=\"default_encryption_enabled\" \n        renderValue={convertBoolToEnable} \n      />\n      <PartialValue \n        label=\"Versioning\" \n        valuePath=\"versioning_status_enabled\"\n        errorPath=\"versioning\"\n        renderValue={convertBoolToEnable} \n      />\n      <PartialValue \n        label=\"MFA Delete\" \n        valuePath=\"version_mfa_delete_enabled\" \n        renderValue={convertBoolToEnable} \n      />\n      <PartialValue \n        label=\"Secure Transport\" \n        valuePath=\"secure_transport_enabled\" \n        renderValue={convertBoolToEnable} \n      />\n      <PartialValue \n        label=\"Static Web Hosting\" \n        valuePath=\"web_hosting_enabled\" \n        renderValue={convertBoolToEnable} \n      />\n\n      <PartialSection path=\"public_access_block_configuration\">\n        <h4>Public Access Block Configuration</h4>\n        <PartialValue \n          label=\"Ignore Public ACLs\" \n          valuePath=\"IgnorePublicAcls\" \n          renderValue={convertBoolToEnable} \n        />\n        <PartialValue \n          label=\"Block Public Policies\" \n          valuePath=\"BlockPublicPolicy\" \n          renderValue={convertBoolToEnable} \n        />\n        <PartialValue \n          label=\"Block Public ACLs\" \n          valuePath=\"BlockPublicAcls\" \n          renderValue={convertBoolToEnable} \n        />\n        <PartialValue \n          label=\"Restrict Public Buckets\" \n          valuePath=\"RestrictPublicBuckets\" \n          renderValue={convertBoolToEnable} \n        />\n      </PartialSection>\n\n    </>\n  );\n};\n\nexport default Informations;\n","import React, { useContext } from 'react';\nimport get from 'lodash/get';\n\nimport { PartialContext, PartialPathContext } from '../../../../components/Partial/context';\nimport { PartialValue } from '../../../../components/Partial';\nimport { convertBoolToCheckmark } from '../../../../utils/Partials';\n\n\nconst AccessControlList = () => {\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const value = get(ctx.item, basePath);  \n\n  return (\n    <table className=\"acl-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Encrypted</th>\n          <th>Permissions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(value).map(id => (\n          <tr key={id}>\n            <td>\n              {id.name}\n            </td>\n            <td>\n              {/* TODO: this hasn't been tested */}\n              <PartialValue \n                valuePath={`${id}.ServerSideEncryption`}\n                errorPath={`${id}.unencrypted`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n            <td>\n              <PartialValue \n                valuePath={`${id}.grantees`}\n                renderValue={convertBoolToCheckmark}\n              />\n            </td>\n          </tr>\n        ))}\n        \n      </tbody>\n    </table>\n  );\n};\n\nexport default AccessControlList;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport { PartialContext, PartialPathContext } from '../../../../components/Partial/context';\n\nconst propTypes = {\n  columnName: PropTypes.string.isRequired,\n};\n\nconst PoliciesAccessTable = props => {\n  const { columnName } = props;\n\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const value = get(ctx.item, basePath);\n\n  return (\n    <table className=\"policies-table\">\n      <thead>\n        <tr>\n          <th>{columnName}</th>\n          <th>Policy Name</th>\n          <th>Condition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(value).map(([id, accessGroup]) => {\n          const policies = accessGroup.policies || accessGroup.inline_policies;\n          \n          return Object.entries(policies).map(([policy_id, policy], i) => (\n            <tr key={policy_id}>\n              {i == 0 && (\n                <td rowSpan={Object.keys(policies).length}>\n                  {id}\n                </td>\n              )}\n              <td>\n                {policy_id}\n              </td>\n              <td>\n                {(get(policy, 'condition', null) != null).toString()}\n              </td>\n            </tr>\n          ));\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nPoliciesAccessTable.propTypes = propTypes;\n\nexport default PoliciesAccessTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { partialDataShape } from '../../../utils/Partials';\nimport { Partial, PartialSection } from '../../../components/Partial';\nimport Policy from '../../../components/Partial/Policy';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport AccessControlList from './AccessControlList';\nimport PoliciesAccessTable from './PoliciesAccessTable';\nimport Keys from './Keys';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Bucket = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const policy = get(data, ['item', 'policy']);\n  const keys = get(data, ['item', 'keys']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu className=\"bucket-policies\">\n        {!isEmpty(policy) && (\n          <TabPane title=\"Bucket Policy\">\n            <Policy \n              policy={policy}\n            />\n          </TabPane>\n        )}\n        <TabPane title=\"Bucket ACLs\">\n          <PartialSection path=\"grantees\">\n            <AccessControlList />\n          </PartialSection>\n        </TabPane>\n        <TabPane title=\"Groups\">\n          <PartialSection path=\"groups\">\n            <PoliciesAccessTable columnName=\"Groups name\"/>\n          </PartialSection>\n        </TabPane>\n        <TabPane title=\"Roles\">\n          <PartialSection path=\"roles\">\n            <PoliciesAccessTable columnName=\"Roles name\"/>\n          </PartialSection>\n        </TabPane>\n        <TabPane title=\"Users\">\n          <PartialSection path=\"users\">\n            <PoliciesAccessTable columnName=\"Users name\"/>\n          </PartialSection>\n        </TabPane>\n        {!isEmpty(keys) && (\n          <TabPane title=\"Keys\">\n            <PartialSection path=\"keys\">\n              <Keys />\n            </PartialSection>\n          </TabPane>\n        )}\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nBucket.propTypes = propTypes;\n\nexport default Bucket;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}