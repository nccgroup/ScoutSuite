{"version":3,"sources":["partials/aws/cloudtrail.regions.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Trails","props","data","trails","get","label","valuePath","errorPath","renderValue","value","Boolean","toString","title","disabled","isEmpty","renderResourcesAsList","Object","values","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","map","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon"],"mappings":"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","file":"static/js/31.8754c58f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  renderResourcesAsList,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Trails = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const trails = get(data, ['item', 'trails'], []);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue \n          label=\"Configured\"\n          valuePath=\"trails_count\"\n          errorPath=\"NotConfigured\"\n          renderValue={value => Boolean(value).toString()}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane\n          title=\"Trails\"\n          disabled={isEmpty(trails)}\n        >\n          {renderResourcesAsList(Object.values(trails), 'name')}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nTrails.propTypes = propTypes;\n\nexport default Trails;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}