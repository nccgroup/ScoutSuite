{"version":3,"sources":["partials/aws/rds.regions.id.vpcs.id.instances.id/Informations/index.js","partials/aws/rds.regions.id.vpcs.id.instances.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Informations","label","valuePath","renderValue","formatDate","makeTitle","convertBoolToEnable","value","SecurityGroups","props","data","title","Address","Port","errorPath","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","get","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","map","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon"],"mappings":"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","file":"static/js/25.c3d63a2b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\nimport { \n  formatDate, \n  makeTitle,\n  convertBoolToEnable,\n} from '../../../../utils/Partials';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue \n        label=\"ARN\" \n        valuePath=\"arn\" \n      />\n      <PartialValue \n        label=\"Region\" \n        valuePath=\"region\" \n      />\n      <PartialValue \n        label=\"Engine\" \n        valuePath=\"Engine\" \n      />\n      <PartialValue \n        label=\"Creation Time\" \n        valuePath=\"InstanceCreateTime\" \n        renderValue={formatDate}\n      />\n      <PartialValue \n        label=\"Status\" \n        valuePath=\"DBInstanceStatus\" \n        renderValue={makeTitle}\n      />\n      <PartialValue \n        label=\"Is Read Replica\" \n        valuePath=\"is_read_replica\"\n      />\n      <PartialValue \n        label=\"Auto Minor Version Upgrade\" \n        valuePath=\"AutoMinorVersionUpgrade\" \n        renderValue={convertBoolToEnable}\n      />\n      <PartialValue \n        label=\"Multi Availability Zones\" \n        valuePath=\"MultiAZ\" \n        renderValue={convertBoolToEnable}\n      />\n      <PartialValue \n        label=\"Instance Class\" \n        valuePath=\"DBInstanceClass\"\n      />\n      <PartialValue \n        label=\"Backup Retention Period\" \n        valuePath=\"BackupRetentionPeriod\"\n        renderValue={value => `${value} days`}\n      />\n      <PartialValue \n        label=\"Enhanced Monitoring\" \n        valuePath=\"EnhancedMonitoringResourceArn\" \n        renderValue={convertBoolToEnable}\n      />\n      <PartialValue \n        label=\"Encrypted Storage\" \n        valuePath=\"StorageEncrypted\" \n        renderValue={convertBoolToEnable}\n      />\n      <PartialValue \n        label=\"CA Certificate\" \n        valuePath=\"CACertificateIdentifier\" \n      />\n    </>\n  );\n};\n\nexport default Informations;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { partialDataShape, convertBoolToEnable } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst SecurityGroups = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Network\">\n          <div>\n            <PartialValue \n              label=\"Endpoint\"\n              valuePath=\"Endpoint\"\n              renderValue={value => `${value.Address}:${value.Port}`}\n            />\n            <PartialValue \n              label=\"Publicly Accessible\"\n              valuePath=\"PubliclyAccessible\"\n              errorPath=\"instance_publicly_accessible\"\n              renderValue={convertBoolToEnable}\n            />\n          </div>\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nSecurityGroups.propTypes = propTypes;\n\nexport default SecurityGroups;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}