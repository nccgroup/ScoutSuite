{"version":3,"sources":["partials/azure/rbac.subscriptions.id.roles.id/index.js","components/InformationsWrapper/index.js","api/useResources.js"],"names":["renderGroups","groups","renderList","group","service","resource","id","name","renderGroup","renderUsers","users","user","renderUser","renderServicePrincipals","service_principals","sp","renderSP","Roles","props","data","item","useResources","assignments","label","valuePath","renderValue","valueOrNone","title","policy","permissions","defaultOpen","errorPath","value","InformationsWrapper","children","className","ids","useState","setData","loading","setLoading","useEffect","a","requests","map","API","Promise","all","response","console","info","error","message","asyncAPI"],"mappings":"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","file":"static/js/114.a1c8a8c8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { partialDataShape, valueOrNone } from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport { renderList } from '../../../utils/Partials/index';\nimport ResourceLink from '../../../components/ResourceLink/index';\nimport { useResources } from '../../../api/useResources';\nimport Policy from '../../../components/Partial/Policy';\n\nconst renderGroups = groups => {\n  const renderGroup = group => (\n    <ResourceLink\n      service=\"aad\"\n      resource=\"groups\"\n      id={group.id}\n      name={group.name}\n    />\n  );\n  return renderList(groups, '', group => renderGroup(group));\n};\n\nconst renderUsers = users => {\n  const renderUser = user => (\n    <ResourceLink\n      service=\"aad\"\n      resource=\"users\"\n      id={user.id}\n      name={user.name}\n    />\n  );\n  return renderList(users, '', user => renderUser(user));\n};\n\nconst renderServicePrincipals = service_principals => {\n  const renderSP = sp => (\n    <ResourceLink\n      service=\"aad\"\n      resource=\"service_principals\"\n      id={sp.id}\n      name={sp.name}\n    />\n  );\n  return renderList(service_principals, '', sp => renderSP(sp));\n};\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  item: PropTypes.object,\n};\n\nconst Roles = props => {\n  const { data, item } = props;\n  const { data: users } = useResources(\n    'aad',\n    'users',\n    item.assignments ? item.assignments.users : [],\n  );\n  const { data: groups } = useResources(\n    'aad',\n    'groups',\n    item.assignments ? item.assignments.groups : [],\n  );\n  const { data: service_principals } = useResources(\n    'aad',\n    'service_principals',\n    item.assignments ? item.assignments.service_principals : [],\n  );\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"ID\" valuePath=\"id\"\n          renderValue={valueOrNone} />\n\n        <PartialValue\n          label=\"Description\"\n          valuePath=\"description\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Type\" valuePath=\"type\"\n          renderValue={valueOrNone} />\n\n        <PartialValue\n          label=\"Role Type\"\n          valuePath=\"role_type\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Assignable Scopes\"\n          valuePath=\"assignable_scopes\"\n          renderValue={valueOrNone}\n        />\n        <PartialValue\n          label=\"Custom Subscriptions Owner Roles\"\n          valuePath=\"custom_subscription_owner_role\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Permissions\">\n          <Policy\n            name=''\n            policy={item.permissions}\n            defaultOpen\n          />\n        </TabPane>\n        <TabPane title=\"Assignments\">\n          {item.assignments.users && <>\n            <PartialValue\n              label=\"Users\"\n              errorPath=\"users\"\n              value=\"\" />\n            <ul>\n              {renderUsers(users)}\n            </ul>\n          </>}\n\n          {item.assignments.groups && <>\n            <PartialValue\n              label=\"Groups\"\n              errorPath=\"groups\"\n              value=\"\" />\n            <ul>\n              {renderGroups(groups)}\n            </ul>\n          </>}\n\n          {item.assignments.service_principals && <>\n            <PartialValue\n              label=\"Service Principals\"\n              errorPath=\"serviceprincipals\"\n              value=\"\" />\n            <ul>\n              {renderServicePrincipals(service_principals)}\n            </ul>\n          </>}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRoles.propTypes = propTypes;\n\nexport default Roles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import { useEffect, useState } from 'react';\nimport * as API from './api';\n\n/**\n * React Hook to fetch API data and re-render the component\n * @param {*} path\n */\nexport const useResources = (service, resource, ids) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const asyncAPI = async () => {\n      if (service && resource && ids) {\n        setLoading(true);\n        try {\n          const requests = ids.map(id =>\n            API.get(`services/${service}/resources/${resource}/${id}`),\n          );\n          const response = await Promise.all(requests);\n          console.info('useResources response', service, resource, ids, response);\n          setData(response);\n        } catch (e) {\n          console.error(e.message);\n        }\n        setLoading(false);\n      }\n    };\n    asyncAPI();\n  }, [ids]);\n\n  return {\n    data,\n    loading,\n  };\n};\n"],"sourceRoot":""}