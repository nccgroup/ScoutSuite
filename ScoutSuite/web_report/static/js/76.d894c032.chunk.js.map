{"version":3,"sources":["partials/aws/elb.regions.id.elb_policies.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["ELBs","props","data","protocols","get","options","ciphers","attributes","isSslPolicy","renderEntries","entry","map","i","key","value","label","title","Object","entries","filter","x","AttributeName","AttributeValue","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","valuePath","errorPath","inline","tooltip","tooltipProps","renderValue","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon"],"mappings":"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","file":"static/js/76.d894c032.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport { Partial } from '../../../components/Partial';\nimport { partialDataShape } from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport DetailedValue from '../../../components/DetailedValue';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst ELBs = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const protocols = get(data, ['item', 'protocols']);\n  const options = get(data, ['item', 'options']);\n  const ciphers = get(data, ['item', 'ciphers']);\n  const attributes = get(data, ['item', 'PolicyAttributeDescriptions']);\n  const isSslPolicy = get(data, ['item', 'PolicyTypeName']) === 'SSLNegotiationPolicyType';\n\n  const renderEntries = entry => (\n    <div>\n      {entry.map(([key, value], i) => (\n        <DetailedValue\n          key={i}\n          label={key}\n          value={value}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <Partial data={data}>\n      {isSslPolicy ? (\n        <TabsMenu>\n          <TabPane title=\"Protocols\">\n            {renderEntries(Object.entries(protocols))}\n          </TabPane>\n          <TabPane title=\"Options\">\n            {renderEntries(Object.entries(options))}\n          </TabPane>\n          <TabPane title=\"Ciphers\">\n            {renderEntries(Object.entries(ciphers)\n              .filter(([, value]) => value === 'true')\n            )}\n          </TabPane>\n        </TabsMenu>\n      ) : (\n        <TabsMenu>\n          <TabPane title=\"Attributes\">\n            {renderEntries(attributes.map(x => [\n              x.AttributeName, x.AttributeValue\n            ]))}\n          </TabPane>\n        </TabsMenu>\n      )}\n    </Partial>\n  );\n};\n\nELBs.propTypes = propTypes;\n\nexport default ELBs;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}