{"version":3,"sources":["partials/aws/redshift.regions.id.vpcs.id.clusters.id/Informations/index.js","partials/aws/redshift.regions.id.vpcs.id.clusters.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Informations","label","valuePath","renderValue","formatDate","value","map","group","i","ParameterGroupName","Clusters","props","data","vpcGroups","get","clusterGroups","title","Address","Port","isEmtpy","VpcSecurityGroupId","Status","ClusterSecurityGroupName","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx"],"mappings":"oJAuDeA,UAjDM,WACnB,OACE,qCACE,cAAC,IAAD,CACEC,MAAM,MACNC,UAAU,QAEZ,cAAC,IAAD,CACED,MAAM,YACNC,UAAU,aAEZ,cAAC,IAAD,CACED,MAAM,wBACNC,UAAU,wBAEZ,cAAC,IAAD,CACED,MAAM,sCACNC,UAAU,qCAEZ,cAAC,IAAD,CACED,MAAM,gBACNC,UAAU,oBACVC,YAAaC,MAEf,cAAC,IAAD,CACEH,MAAM,oBACNC,UAAU,qBAEZ,cAAC,IAAD,CACED,MAAM,YACNC,UAAU,cAEZ,cAAC,IAAD,CACED,MAAM,2BACNC,UAAU,yBACVC,YAAa,SAAAE,GAAK,OAChB,6BACGA,EAAMC,KAAI,SAACC,EAAOC,GAAR,OACT,6BACGD,EAAME,oBADAD,gB,uICuCRE,UAlEE,SAAAC,GAAU,IACjBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAYC,IAAIF,EAAM,CAAC,OAAQ,sBAC/BG,EAAgBD,IAAIF,EAAM,CAAC,OAAQ,0BAEzC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,cAAC,IAAD,UACE,cAAC,UAAD,MAGF,cAAC,IAAD,UACE,cAAC,IAAD,CAASI,MAAM,UAAf,SACE,gCACE,cAAC,IAAD,CACEf,MAAM,WACNC,UAAU,WACVC,YAAa,SAAAE,GAAK,gBAAOA,EAAMY,QAAb,YAAwBZ,EAAMa,SAElD,cAAC,IAAD,CACEjB,MAAM,sBACNC,UAAU,uBAEZ,cAAC,IAAD,CACED,MAAM,MACNC,UAAU,UAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,6BAETiB,IAAQN,IAAcM,IAAQJ,KAC/B,cAAC,IAAD,CACEd,MAAM,kBACNE,YAAa,kBACX,qCACE,6BACGU,EAAUP,KAAI,SAACC,EAAOC,GAAR,OACb,uCACMD,EAAMa,mBADZ,YACkCb,EAAMc,SAD/Bb,QAKb,6BACGO,EAAcT,KAAI,SAACC,EAAOC,GAAR,OACjB,uCACMD,EAAMe,yBADZ,YACwCf,EAAMc,SADrCb,0B,wDCzClBe,IAda,SAAAZ,GAAU,IAC5Ba,EAAab,EAAba,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACf,GAAW,IAE/BK,EAKEL,EALFK,MACAW,EAIEhB,EAJFgB,WACAC,EAGEjB,EAHFiB,SACAC,EAEElB,EAFFkB,QACAL,EACEb,EADFa,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGf,EACAkB,IAAWH,GAAYI,QAG1BnB,EAGJ,OACE,cAAC,IAAkBoB,SAAnB,CAA4B/B,MAAO2B,EAAnC,SACE,cAAC,IAAD,CACEhB,MAAOiB,EACPR,UAAWY,IAAG,mBAAoBN,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL","file":"static/js/31.02d50fbc.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\nimport { formatDate } from '../../../../utils/Partials';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue \n        label=\"ARN\" \n        valuePath=\"arn\" \n      />\n      <PartialValue \n        label=\"Node Type\" \n        valuePath=\"NodeType\" \n      />\n      <PartialValue \n        label=\"Allow Version Upgrade\" \n        valuePath=\"AllowVersionUpgrade\" \n      />\n      <PartialValue \n        label=\"Automated Snapshot Retention Period\" \n        valuePath=\"AutomatedSnapshotRetentionPeriod\"\n      />\n      <PartialValue \n        label=\"Creation Time\" \n        valuePath=\"ClusterCreateTime\" \n        renderValue={formatDate}\n      />\n      <PartialValue \n        label=\"Availability Zone\" \n        valuePath=\"AvailabilityZone\"\n      />\n      <PartialValue \n        label=\"Encrypted\" \n        valuePath=\"Encrypted\"\n      />\n      <PartialValue \n        label=\"Cluster Parameter Groups\" \n        valuePath=\"ClusterParameterGroups\" \n        renderValue={value => (\n          <ul>\n            {value.map((group, i) => (\n              <li key={i}>\n                {group.ParameterGroupName}\n              </li>\n            ))}\n          </ul>\n        )}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmtpy from 'lodash/isEmpty';\n\nimport { partialDataShape, } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Clusters = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const vpcGroups = get(data, ['item', 'VpcSecurityGroups']);\n  const clusterGroups = get(data, ['item', 'ClusterSecurityGroups']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Network\">\n          <div>\n            <PartialValue \n              label=\"Endpoint\"\n              valuePath=\"Endpoint\"\n              renderValue={value => `${value.Address}:${value.Port}`}\n            />\n            <PartialValue \n              label=\"Publicly Accessible\"\n              valuePath=\"PubliclyAccessible\"\n            />\n            <PartialValue \n              label=\"VPC\"\n              valuePath=\"VpcId\"\n            />\n            <PartialValue \n              label=\"Subnet\"\n              valuePath=\"ClusterSubnetGroupName\"\n            />\n            {!(isEmtpy(vpcGroups) && isEmtpy(clusterGroups)) && (\n              <PartialValue\n                label=\"Security Groups\"\n                renderValue={() => (\n                  <>\n                    <ul>\n                      {vpcGroups.map((group, i) => (\n                        <li key={i}>\n                          {`${group.VpcSecurityGroupId} ${group.Status}`}\n                        </li>\n                      ))}\n                    </ul>\n                    <ul>\n                      {clusterGroups.map((group, i) => (\n                        <li key={i}>\n                          {`${group.ClusterSecurityGroupName} ${group.Status}`}\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                )}\n              />\n            )}\n          </div>\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nClusters.propTypes = propTypes;\n\nexport default Clusters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}