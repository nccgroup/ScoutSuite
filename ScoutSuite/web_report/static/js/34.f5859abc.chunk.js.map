{"version":3,"sources":["partials/aws/vpc.regions.id.peering_connections.id/PeeringConnection/index.js","partials/aws/vpc.regions.id.peering_connections.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["PeeringConnection","props","connectionInfos","label","value","OwnerId","VpcId","CidrBlock","isEmpty","PeeringOptions","Object","entries","map","i","option","convertBoolToEnable","RegionDomain","data","requesterInfos","get","accepterInfos","tags","valuePath","title","renderAwsTags","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx"],"mappings":"6KA8DeA,UAlDW,SAAAC,GAAU,IAC1BC,EAAoBD,EAApBC,gBAER,OACE,+BACE,6BACE,cAAC,IAAD,CACEC,MAAM,aACNC,MAAOF,EAAgBG,YAG3B,6BACE,cAAC,IAAD,CACEF,MAAM,SACNC,MAAOF,EAAgBI,UAG3B,6BACE,cAAC,IAAD,CACEH,MAAM,OACNC,MAAOF,EAAgBK,eAGzBC,IAAQN,EAAgBO,iBACxB,6BACE,cAAC,IAAD,CACEN,MAAM,kBACNC,MACE,6BACGM,OAAOC,QAAQT,EAAgBO,gBAC7BG,KAAI,WAAkBC,GAAlB,uBAAEC,EAAF,KAAUV,EAAV,YACH,6BACE,cAAC,IAAD,CACED,MAAOW,EACPV,MAAOW,YAAoBX,MAHtBS,iB,uICWdG,UArCM,SAAAf,GAAU,IACrBgB,EAAShB,EAATgB,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAiBC,IAAIF,EAAM,CAAC,OAAQ,qBACpCG,EAAgBD,IAAIF,EAAM,CAAC,OAAQ,oBACnCI,EAAOF,IAAIF,EAAM,CAAC,OAAQ,QAAS,IAEzC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEd,MAAM,SACNmB,UAAU,qBAId,eAAC,IAAD,WACE,cAAC,IAAD,CAASC,MAAM,gBAAf,SACE,cAAC,UAAD,CAAmBrB,gBAAiBgB,MAEtC,cAAC,IAAD,CAASK,MAAM,eAAf,SACE,cAAC,UAAD,CAAmBrB,gBAAiBkB,OAEpCZ,IAAQa,IACR,cAAC,IAAD,CAASE,MAAM,OAAf,SACGC,YAAcH,a,wDCpBZI,IAda,SAAAxB,GAAU,IAC5ByB,EAAazB,EAAbyB,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAAC3B,GAAW,IAE/BsB,EAKEtB,EALFsB,MACAM,EAIE5B,EAJF4B,WACAC,EAGE7B,EAHF6B,SACAC,EAEE9B,EAFF8B,QACAL,EACEzB,EADFyB,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGV,EACAa,IAAWH,GAAYI,QAG1Bd,EAGJ,OACE,cAAC,IAAkBe,SAAnB,CAA4BlC,MAAO8B,EAAnC,SACE,cAAC,IAAD,CACEX,MAAOY,EACPR,UAAWY,IAAG,mBAAoBN,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL","file":"static/js/34.f5859abc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\n\nimport DetailedValue from '../../../../components/DetailedValue';\nimport { convertBoolToEnable } from '../../../../utils/Partials';\n\n\nconst propTypes = {\n  connectionInfos: PropTypes.object.isRequired,\n};\n\nconst PeeringConnection = props => {\n  const { connectionInfos } = props;\n\n  return (\n    <ul>\n      <li>\n        <DetailedValue \n          label=\"Account ID\"\n          value={connectionInfos.OwnerId}\n        />\n      </li>\n      <li>\n        <DetailedValue \n          label=\"VPC ID\"\n          value={connectionInfos.VpcId}\n        />\n      </li>\n      <li>\n        <DetailedValue \n          label=\"CIDR\"\n          value={connectionInfos.CidrBlock}\n        />\n      </li>\n      {!isEmpty(connectionInfos.PeeringOptions) && (\n        <li>\n          <DetailedValue\n            label=\"Peering Options\"\n            value={(\n              <ul>\n                {Object.entries(connectionInfos.PeeringOptions)\n                  .map(([option, value], i) => (\n                    <li key={i}>\n                      <DetailedValue\n                        label={option}\n                        value={convertBoolToEnable(value)}\n                      />\n                    </li>\n                  ))\n                }\n              </ul>\n            )}\n          />\n        </li>\n      )}\n    </ul>\n  );\n};\n\nPeeringConnection.propTypes = propTypes;\n\nexport default PeeringConnection;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { partialDataShape, renderAwsTags } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport PeeringConnection from './PeeringConnection';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst RegionDomain = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const requesterInfos = get(data, ['item', 'RequesterVpcInfo']);\n  const accepterInfos = get(data, ['item', 'AccepterVpcInfo']);\n  const tags = get(data, ['item', 'Tags'], []);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue \n          label=\"Status\"\n          valuePath=\"Status.Message\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Requester VPC\">\n          <PeeringConnection connectionInfos={requesterInfos} />\n        </TabPane>\n        <TabPane title=\"Accepter VPC\">\n          <PeeringConnection connectionInfos={accepterInfos} />\n        </TabPane>\n        {!isEmpty(tags) && (\n          <TabPane title=\"Tags\">\n            {renderAwsTags(tags)}\n          </TabPane>\n        )}\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRegionDomain.propTypes = propTypes;\n\nexport default RegionDomain;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}