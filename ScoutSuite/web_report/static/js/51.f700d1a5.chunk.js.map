{"version":3,"sources":["partials/gcp/computeengine.projects.id.networks.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","api/useResources.js"],"names":["renderInstances","items","map","item","i","service","resource","id","name","Networks","props","data","get","useResources","firewalls","firewallLoading","loading","instanceList","useMemo","instances","instance_id","instancesLoading","label","valuePath","renderValue","formatDate","title","path","defaultValues","path_to_issue","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","finding","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","errorPath","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","value","String","isArray","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","ids","useState","setData","setLoading","a","requests","API","Promise","all","response","error","message","asyncAPI"],"mappings":"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","file":"static/js/51.f700d1a5.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { partialDataShape, formatDate } from '../../../utils/Partials';\nimport { TabPane, TabsMenu } from '../../../components/Tabs';\nimport PartialSection from '../../../components/Partial/PartialSection/index';\nimport { useResources } from '../../../api/useResources';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport ResourceLink from '../../../components/ResourceLink/index';\n\nconst renderFirewalls = items => {\n  return (\n    <ul>\n      {items.map((item, i) => (\n        <li key={i}>\n          <ResourceLink\n            service=\"computeengine\"\n            resource=\"firewalls\"\n            id={item.id}\n            name={item.name}\n            key={item.id}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst renderInstances = items => {\n  return (\n    <ul>\n      {items.map((item, i) => (\n        <li key={i}>\n          <ResourceLink\n            service=\"computeengine\"\n            resource=\"instances\"\n            id={item.id}\n            name={item.name}\n            key={item.id}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Networks = props => {\n  const { data } = props;\n  const item = get(data, ['item'], {});\n\n  const { data: firewalls, loading: firewallLoading } = useResources(\n    'computeengine',\n    'firewalls',\n    item.firewalls,\n  );\n  const instanceList = useMemo(\n    () =>\n      item.instances\n        ? item.instances.map(({ instance_id }) => instance_id)\n        : [],\n    [item],\n  );\n  const { data: instances, loading: instancesLoading } = useResources(\n    'computeengine',\n    'instances',\n    instanceList,\n  );\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue label=\"Name\" valuePath=\"name\" />\n\n        <PartialValue label=\"ID\" valuePath=\"id\" />\n\n        <PartialValue label=\"Project ID\" valuePath=\"project_id\" />\n\n        <PartialValue label=\"Description\" valuePath=\"description\" />\n\n        <PartialValue\n          label=\"Creation Date\"\n          valuePath=\"creation_timestamp\"\n          renderValue={formatDate}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Firewall Rules\">\n          <PartialSection path=\"firewalls\">\n            {renderFirewalls(firewalls)}\n            {firewallLoading && <Skeleton />}\n          </PartialSection>\n        </TabPane>\n\n        <TabPane title=\"Compute Engine Instances\">\n          <PartialSection path=\"instances\">\n            {renderInstances(instances)}\n            {instancesLoading && <Skeleton />}\n          </PartialSection>\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nNetworks.propTypes = propTypes;\n\nexport default Networks;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import { useEffect, useState } from 'react';\nimport * as API from './api';\n\n/**\n * React Hook to fetch API data and re-render the component\n * @param {*} path\n */\nexport const useResources = (service, resource, ids) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const asyncAPI = async () => {\n      if (service && resource && ids) {\n        setLoading(true);\n        try {\n          const requests = ids.map(id =>\n            API.get(`services/${service}/resources/${resource}/${id}`),\n          );\n          const response = await Promise.all(requests);\n          console.info('useResources response', service, resource, ids, response);\n          setData(response);\n        } catch (e) {\n          console.error(e.message);\n        }\n        setLoading(false);\n      }\n    };\n    asyncAPI();\n  }, [ids]);\n\n  return {\n    data,\n    loading,\n  };\n};\n"],"sourceRoot":""}