{"version":3,"sources":["partials/aws/vpc.regions.id.vpcs.id/Informations/index.js","partials/aws/vpc.regions.id.vpcs.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Informations","label","valuePath","RegionDomain","props","data","networkAcls","get","instances","flowLogs","peeringConnections","title","disabled","isEmpty","renderList","Object","values","renderResourceLink","keys","renderFlowlogLink","id","service","resource","nameProps","renderData","name","Status","Message","peer_info","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx"],"mappings":"4IAoCeA,UA/BM,WACnB,OACE,qCACE,cAAC,IAAD,CACEC,MAAM,KACNC,UAAU,OAEZ,cAAC,IAAD,CACED,MAAM,MACNC,UAAU,QAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,WAEZ,cAAC,IAAD,CACED,MAAM,QACNC,UAAU,UAEZ,cAAC,IAAD,CACED,MAAM,aACNC,UAAU,eAEZ,cAAC,IAAD,CACED,MAAM,UACNC,UAAU,iB,+ICyDHC,UAhEM,SAAAC,GAAU,IACrBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAcC,IAAIF,EAAM,CAAC,OAAQ,gBAAiB,IAClDG,EAAYD,IAAIF,EAAM,CAAC,OAAQ,aAAc,IAC7CI,EAAWF,IAAIF,EAAM,CAAC,OAAQ,aAAc,IAC5CK,EAAqBH,IAAIF,EAAM,CAAC,OAAQ,uBAAwB,IActE,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,cAAC,IAAD,UACE,cAAC,UAAD,MAGF,eAAC,IAAD,WACE,cAAC,IAAD,CACEM,MAAM,eACNC,SAAUC,IAAQP,GAFpB,SAIGQ,YAAWC,OAAOC,OAAOV,GAAc,GAAIW,YAAmB,MAAO,mBAExE,cAAC,IAAD,CACEN,MAAM,YACNC,SAAUC,IAAQL,GAFpB,SAKGM,YAAWC,OAAOG,KAAKV,MAE1B,cAAC,IAAD,CACEG,MAAM,YACNC,SAAUC,IAAQJ,GAFpB,SAIE,8BACGK,YAAWL,EAAU,GAAIU,SAG9B,cAAC,IAAD,CACER,MAAM,sBACNC,SAAUC,IAAQH,GAFpB,SAIGI,YAAWJ,EAAoB,IA5Cd,SAAAU,GAAE,OAC1B,cAAC,IAAD,CACEC,QAAQ,MACRC,SAAS,sBACTF,GAAIA,EACJG,UAAW,CACTC,WAAY,SAAAnB,GAAI,gBACXA,EAAKoB,KADM,aACGpB,EAAKqB,OAAOC,QADf,aAC2BtB,EAAKuB,UAAUH,KAD1C,sB,wDCfTI,IAda,SAAAzB,GAAU,IAC5B0B,EAAa1B,EAAb0B,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAAC5B,GAAW,IAE/BO,EAKEP,EALFO,MACAsB,EAIE7B,EAJF6B,WACArB,EAGER,EAHFQ,SACAsB,EAEE9B,EAFF8B,QACAJ,EACE1B,EADF0B,SAN8B,EASIK,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGzB,EACA4B,IAAWH,GAAYI,QAG1B7B,EAGJ,OACE,cAAC,IAAkB8B,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACE1B,MAAO2B,EACPP,UAAWY,IAAG,mBAAoBP,GAClCH,WAAYA,EACZrB,SAAUA,EACVsB,QAASA,EALX,SAOGJ","file":"static/js/35.80e25a8a.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"ID\"\n        valuePath=\"id\"\n      />\n      <PartialValue\n        label=\"ARN\"\n        valuePath=\"arn\"\n      />\n      <PartialValue\n        label=\"Region\"\n        valuePath=\"region\"\n      />\n      <PartialValue\n        label=\"State\"\n        valuePath=\"state\"\n      />\n      <PartialValue\n        label=\"CIDR Block\"\n        valuePath=\"cidr_block\"\n      />\n      <PartialValue\n        label=\"Default\"\n        valuePath=\"default\"\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport {\n  partialDataShape,\n  renderList,\n  renderResourceLink,\n  renderFlowlogLink,\n} from '../../../utils/Partials';\nimport { Partial } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport ResourceLink from '../../../components/ResourceLink';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst RegionDomain = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const networkAcls = get(data, ['item', 'network_acls'], {});\n  const instances = get(data, ['item', 'instances'], {});\n  const flowLogs = get(data, ['item', 'flow_logs'], []);\n  const peeringConnections = get(data, ['item', 'peering_connections'], []);\n\n  const renderPeeringLink = id => (\n    <ResourceLink\n      service=\"vpc\"\n      resource=\"peering_connections\"\n      id={id}\n      nameProps={{\n        renderData: data => \n          `${data.name} (${data.Status.Message}, ${data.peer_info.name})`\n      }}\n    />\n  );\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane\n          title=\"Network ACLs\"\n          disabled={isEmpty(networkAcls)}\n        >\n          {renderList(Object.values(networkAcls), '', renderResourceLink('vpc', 'network_acls'))}\n        </TabPane>\n        <TabPane\n          title=\"Instances\"\n          disabled={isEmpty(instances)}\n        >\n          {/* TODO: confirm validity of instances tab */}\n          {renderList(Object.keys(instances))}\n        </TabPane>\n        <TabPane\n          title=\"Flow Logs\"\n          disabled={isEmpty(flowLogs)}\n        >\n          <div>\n            {renderList(flowLogs, '', renderFlowlogLink)}\n          </div>\n        </TabPane>\n        <TabPane\n          title=\"Peering Connections\"\n          disabled={isEmpty(peeringConnections)}\n        >\n          {renderList(peeringConnections, '', renderPeeringLink)}\n        </TabPane>\n        \n      </TabsMenu>\n    </Partial>\n  );\n};\n\nRegionDomain.propTypes = propTypes;\n\nexport default RegionDomain;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}