{"version":3,"sources":["partials/aws/redshift.regions.id.parameter_groups.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["ParameterGroups","props","data","parameters","get","label","valuePath","title","Object","entries","map","i","name","parameter","value","errorPath","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx"],"mappings":"2LA8DeA,UAhDS,SAAAC,GAAU,IACxBC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAaC,IAAIF,EAAM,CAAC,OAAQ,eAEtC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,MAAM,MACNC,UAAU,QAEZ,cAAC,IAAD,CACED,MAAM,eACNC,UAAU,gBAEZ,cAAC,IAAD,CACED,MAAM,eACNC,UAAU,WAEZ,cAAC,IAAD,CACED,MAAM,0BACNC,UAAU,kBAId,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,MAAM,aAAf,SACE,8BACGC,OAAOC,QAAQN,GAAYO,KAAI,WAAoBC,GAApB,uBAAEC,EAAF,KAAQC,EAAR,YAC9B,cAAC,IAAD,CAEER,MAAOO,EACPE,MAAOD,EAAUC,MACjBC,UAAWH,GAHND,iB,wDCvBNK,IAda,SAAAf,GAAU,IAC5BgB,EAAahB,EAAbgB,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAAClB,GAAW,IAE/BM,EAKEN,EALFM,MACAa,EAIEnB,EAJFmB,WACAC,EAGEpB,EAHFoB,SACAC,EAEErB,EAFFqB,QACAL,EACEhB,EADFgB,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGjB,EACAoB,IAAWH,GAAYI,QAG1BrB,EAGJ,OACE,cAAC,IAAkBsB,SAAnB,CAA4Bf,MAAOW,EAAnC,SACE,cAAC,IAAD,CACElB,MAAOmB,EACPR,UAAWY,IAAG,mBAAoBN,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL","file":"static/js/40.1fb79a02.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport { partialDataShape } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst ParameterGroups = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const parameters = get(data, ['item', 'parameters']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"ARN\"\n          valuePath=\"arn\"\n        />\n        <PartialValue\n          label=\"Descripition\"\n          valuePath=\"description\"\n        />\n        <PartialValue\n          label=\"Group Family\"\n          valuePath=\"family\"\n        />\n        <PartialValue\n          label=\"Default Parameter Group\"\n          valuePath=\"is_default\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Parameters\">\n          <div>\n            {Object.entries(parameters).map(([name, parameter], i) => (\n              <PartialValue\n                key={i}\n                label={name}\n                value={parameter.value}\n                errorPath={name}\n              />\n            ))}\n          </div>\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nParameterGroups.propTypes = propTypes;\n\nexport default ParameterGroups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}