{"version":3,"sources":["partials/aws/cloudwatch.regions.id.alarms.id/Informations/index.js","partials/aws/cloudwatch.regions.id.alarms.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/WarningMessage/index.js"],"names":["Informations","label","valuePath","className","MetricFilters","props","data","actions","get","alarms","title","isEmpty","errorPath","renderValue","message","renderResourcesAsList","disabled","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","size","startIcon","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","value","String","isArray","map","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon","fontSize","WarningMessage"],"mappings":"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","file":"static/js/13.ddd67ab9.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\n\nimport './style.scss';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"Name\"\n        valuePath=\"name\"\n      />\n      <PartialValue\n        label=\"Region\"\n        valuePath=\"region\"\n      />\n      <PartialValue\n        label=\"Actions Enabled\"\n        valuePath=\"ActionsEnabled\"\n      />\n      <PartialValue\n        label=\"State\"\n        valuePath=\"StateValue\"\n      />\n      <div className=\"alarm-metrics\">\n        <PartialValue\n          label=\"Metric\"\n          valuePath=\"Namespace\"\n        />\n        <span>::</span>\n        <PartialValue\n          valuePath=\"MetricName\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { \n  partialDataShape,\n  renderResourcesAsList,\n} from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\nimport WarningMessage from '../../../components/WarningMessage';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst MetricFilters = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const actions = get(data, ['item', 'AlarmActions']);\n  const alarms = get(data, ['item', 'InsufficientDataActions'], []);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n      \n      <TabsMenu>\n        <TabPane title=\"Alarm Actions\">\n          {!isEmpty(actions) ? (\n            renderResourcesAsList(actions)\n          ) : (\n            <PartialValue\n              errorPath=\"NoActions\"\n              renderValue={() => (\n                <WarningMessage\n                  message=\"No actions have been configured for this alarm.\"\n                />\n              )}\n            />\n          )}\n        </TabPane>\n        <TabPane \n          title=\"Insufficient Data Actions\"\n          disabled={isEmpty(alarms)}\n        >\n          {renderResourcesAsList(alarms)}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nMetricFilters.propTypes = propTypes;\n\nexport default MetricFilters;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  message: PropTypes.string.isRequired,\n  icon: PropTypes.element,\n  className: PropTypes.string,\n};\n\nconst defaultProps = {\n  icon: <ReportProblemOutlinedIcon fontSize=\"inherit\" />\n};\n\nconst WarningMessage = props => {\n  const { \n    message, \n    icon,\n    className,\n  } = props;\n\n  return (\n    <div className={cx('warning-message', className)}>\n      {icon}\n      {message}\n    </div>\n  );\n};\n\nWarningMessage.propTypes = propTypes;\nWarningMessage.defaultProps = defaultProps;\n\nexport default WarningMessage;\n"],"sourceRoot":""}