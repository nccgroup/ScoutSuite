{"version":3,"sources":["partials/azure/aad.groups.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","api/useResources.js"],"names":["renderUsers","users","renderList","user","service","resource","id","name","renderUser","renderRoles","roles","rolesList","role","subscription_id","find","r","role_id","renderRole","Groups","props","data","item","useResources","useMemo","map","label","valuePath","renderValue","valueOrNone","convertBoolToEnable","title","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx","ids","setData","loading","setLoading","useEffect","a","requests","API","Promise","all","response","console","info","error","message","asyncAPI"],"mappings":"mLAeMA,EAAc,SAAAC,GASlB,OAAOC,YAAWD,EAAO,IAAI,SAAAE,GAAI,OARd,SAAAA,GAAI,OACrB,cAAC,IAAD,CACEC,QAAQ,MACRC,SAAS,QACTC,GAAIH,EAAKG,GACTC,KAAMJ,EAAKI,OAGsBC,CAAWL,OAG5CM,EAAc,SAACC,EAAOC,GAe1B,OAAOT,YAAWQ,EAAO,IAAI,SAAAE,GAAI,OAdd,SAAAA,GAAS,IAClBC,EAAoBF,EAAUG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAYJ,EAAKN,MAA3DO,gBACR,OACE,iCACE,cAAC,IAAD,CACET,QAAQ,OACRC,SAAS,QACTC,GAAIM,EAAKN,GACTC,KAAMK,EAAKL,OACV,IANL,iBAOiBM,EAPjB,OAWiCI,CAAWL,OAuEnCM,UA/DA,SAAAC,GAAU,IACfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACApB,EAAUqB,YAAa,MAAO,QAASD,EAAKpB,OAAlDmB,KACFT,EAAYY,mBAAQ,kBAAMF,EAAKX,MAAMc,KAAI,SAAAT,GAAC,OAAIA,EAAEC,aAAU,CAACK,EAAKX,QACxDA,EAAUY,YAAa,OAAQ,QAASX,GAA9CS,KAER,OAAKA,EAGH,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEK,MAAM,OAAOC,UAAU,OACvBC,YAAaC,MAEf,cAAC,IAAD,CACEH,MAAM,OACNC,UAAU,cACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,gBACNC,UAAU,gBACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,cACNC,UAAU,eACVC,YAAaE,MAGf,cAAC,IAAD,CACEJ,MAAM,OAAOC,UAAU,OACvBC,YAAaC,MAEf,cAAC,IAAD,CACEH,MAAM,kBACNC,UAAU,mBACVC,YAAaE,MAGf,cAAC,IAAD,CACEJ,MAAM,qBACNC,UAAU,qBACVC,YAAaC,SAIjB,eAAC,IAAD,WACE,cAAC,IAAD,CAASE,MAAM,mBAAf,SACGrB,EAAYC,EAAOW,EAAKX,SAG3B,cAAC,IAAD,CAASoB,MAAM,UAAf,SAA0B9B,EAAYC,WAjD1B,O,wDChCL8B,IAda,SAAAZ,GAAU,IAC5Ba,EAAab,EAAba,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACf,GAAW,IAE/BW,EAKEX,EALFW,MACAK,EAIEhB,EAJFgB,WACAC,EAGEjB,EAHFiB,SACAC,EAEElB,EAFFkB,QACAL,EACEb,EADFa,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGT,EACAY,IAAWH,GAAYI,QAG1Bb,EAGJ,OACE,cAAC,IAAkBc,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACEV,MAAOW,EACPR,UAAWa,IAAG,mBAAoBP,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL,S,uHC1CIV,EAAe,SAAClB,EAASC,EAAU0C,GAAS,IAAD,EAC9BT,mBAAS,IADqB,mBAC/ClB,EAD+C,KACzC4B,EADyC,OAExBV,oBAAS,GAFe,mBAE/CW,EAF+C,KAEtCC,EAFsC,KAwBtD,OApBAC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,2DACXhD,GAAWC,GAAY0C,GADZ,wBAEbG,GAAW,GAFE,SAILG,EAAWN,EAAIvB,KAAI,SAAAlB,GAAE,OACzBgD,IAAA,mBAAoBlD,EAApB,sBAAyCC,EAAzC,YAAqDC,OAL5C,SAOYiD,QAAQC,IAAIH,GAPxB,OAOLI,EAPK,OAQXC,QAAQC,KAAK,wBAAyBvD,EAASC,EAAU0C,EAAKU,GAC9DT,EAAQS,GATG,kDAWXC,QAAQE,MAAM,KAAEC,SAXL,QAabX,GAAW,GAbE,0DAAH,qDAgBdY,KACC,CAACf,IAEG,CACL3B,OACA6B","file":"static/js/26.3b801eb4.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport {\n  partialDataShape,\n  valueOrNone,\n  convertBoolToEnable,\n} from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport { useResources } from '../../../api/useResources';\nimport { renderList } from '../../../utils/Partials/index';\nimport ResourceLink from '../../../components/ResourceLink/index';\n\nconst renderUsers = users => {\n  const renderUser = user => (\n    <ResourceLink\n      service=\"aad\"\n      resource=\"users\"\n      id={user.id}\n      name={user.name}\n    />\n  );\n  return renderList(users, '', user => renderUser(user));\n};\n\nconst renderRoles = (roles, rolesList) => {\n  const renderRole = role => {\n    const { subscription_id } = rolesList.find(r => r.role_id === role.id);\n    return (\n      <span>\n        <ResourceLink\n          service=\"rbac\"\n          resource=\"roles\"\n          id={role.id}\n          name={role.name}\n        />{' '}\n        (subscription {subscription_id})\n      </span>\n    );\n  };\n  return renderList(roles, '', role => renderRole(role));\n};\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  item: PropTypes.object,\n};\n\nconst Groups = props => {\n  const { data, item } = props;\n  const { data: users } = useResources('aad', 'users', item.users);\n  const rolesList = useMemo(() => item.roles.map(r => r.role_id), [item.roles]);\n  const { data: roles } = useResources('rbac', 'roles', rolesList);\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Name\" valuePath=\"name\"\n          renderValue={valueOrNone} />\n\n        <PartialValue\n          label=\"Type\"\n          valuePath=\"object_type\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Mail Nickname\"\n          valuePath=\"mail_nickname\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Mail Status\"\n          valuePath=\"mail_enabled\"\n          renderValue={convertBoolToEnable}\n        />\n\n        <PartialValue\n          label=\"Mail\" valuePath=\"mail\"\n          renderValue={valueOrNone} />\n\n        <PartialValue\n          label=\"Security Status\"\n          valuePath=\"security_enabled\"\n          renderValue={convertBoolToEnable}\n        />\n\n        <PartialValue\n          label=\"Deletion Timestamp\"\n          valuePath=\"deletion_timestamp\"\n          renderValue={valueOrNone}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Role Assignments\">\n          {renderRoles(roles, item.roles)}\n        </TabPane>\n\n        <TabPane title=\"Members\">{renderUsers(users)}</TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nGroups.propTypes = propTypes;\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import { useEffect, useState } from 'react';\nimport * as API from './api';\n\n/**\n * React Hook to fetch API data and re-render the component\n * @param {*} path\n */\nexport const useResources = (service, resource, ids) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const asyncAPI = async () => {\n      if (service && resource && ids) {\n        setLoading(true);\n        try {\n          const requests = ids.map(id =>\n            API.get(`services/${service}/resources/${resource}/${id}`),\n          );\n          const response = await Promise.all(requests);\n          console.info('useResources response', service, resource, ids, response);\n          setData(response);\n        } catch (e) {\n          console.error(e.message);\n        }\n        setLoading(false);\n      }\n    };\n    asyncAPI();\n  }, [ids]);\n\n  return {\n    data,\n    loading,\n  };\n};\n"],"sourceRoot":""}