{"version":3,"sources":["partials/aws/elbv2.regions.id.vpcs.id.lbs.id/Informations/index.js","partials/aws/elbv2.regions.id.vpcs.id.lbs.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","utils/Api/index.js"],"names":["Informations","label","valuePath","errorPath","renderValue","value","map","zone","i","ZoneName","SubnetId","ElbV2","props","data","path","get","region","getRegionFromPath","vpcId","getVpcFromPath","useAPI","getRawEndpoint","vpc","loading","isEmpty","item","listeners","attributes","securityGroups","tags","isNetwork","title","Object","entries","port","listener","SslPolicy","Protocol","inline","Key","Value","disabled","renderList","renderSecurityGroupLink","renderAwsTags","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","cx","match"],"mappings":"4IA8CeA,UAzCM,WACnB,OACE,qCACE,cAAC,IAAD,CACEC,MAAM,MACNC,UAAU,QAEZ,cAAC,IAAD,CACED,MAAM,MACNC,UAAU,QAEZ,cAAC,IAAD,CACED,MAAM,MACNC,UAAU,YAEZ,cAAC,IAAD,CACED,MAAM,SACNC,UAAU,SACVC,UAAU,yBAEZ,cAAC,IAAD,CACEF,MAAM,OACNC,UAAU,SAEZ,cAAC,IAAD,CACED,MAAM,qBACNC,UAAU,oBACVE,YAAa,SAAAC,GAAK,OAChB,6BACGA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,uCACMD,EAAKE,SADX,aACwBF,EAAKG,SAD7B,MAASF,gB,gLCiFRG,UA5FD,SAAAC,GAAU,IACdC,EAASD,EAATC,KAEFC,EAAOC,IAAIF,EAAM,CAAC,OAAQ,QAAS,IACnCG,EAASC,YAAkBH,GAC3BI,EAAQC,YAAeL,GALR,EAOUM,YAC7BC,YAAe,0BAAD,OAA2BL,EAA3B,iBAA0CE,EAA1C,WADFI,EAPO,EAObT,KAAWU,EAPE,EAOFA,QAInB,IAAKV,GAAQU,EAAS,OAAO,KAExBC,IAAQF,KACXT,EAAKY,KAAKH,IAAV,UAAmBA,EAAnB,aAA2BJ,EAA3B,MAGF,IAAMQ,EAAYX,IAAIF,EAAM,CAAC,OAAQ,aAAc,IAC7Cc,EAAaZ,IAAIF,EAAM,CAAC,OAAQ,cAAe,IAC/Ce,EAAiBb,IAAIF,EAAM,CAAC,OAAQ,mBAAoB,IACxDgB,EAAOd,IAAIF,EAAM,CAAC,OAAQ,QAAS,IACnCiB,EAAYf,IAAIF,EAAM,CAAC,OAAQ,cAErC,OACE,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,cAAC,IAAD,UACE,cAAC,UAAD,MAGF,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASkB,MAAM,YAAf,SACE,6BACGC,OAAOC,QAAQP,GAAWpB,KAAI,WAAmBE,GAAnB,uBAAE0B,EAAF,KAAQC,EAAR,YAC7B,6BACE,cAAC,IAAD,CACE9B,MAAK,aACH6B,QACGC,GAELhC,UAAS,oBAAe+B,GACxB9B,YAAa,SAAAC,GAAK,OAAIA,EAAM+B,UAC1B,+CACM/B,EAAM6B,KADZ,aACqB7B,EAAMgC,SAD3B,MAEE,cAAC,IAAD,CACEhC,MAAOA,EAAM+B,UACbjC,UAAS,oBAAeE,EAAM6B,KAArB,cACTI,QAAM,IAEP,OARiB,UAWjBjC,EAAM6B,KAXW,aAWF7B,EAAMgC,SAXJ,SAPjB7B,UAyBf,cAAC,IAAD,CAASuB,MAAM,aAAf,SACE,8BACGJ,EAAWrB,KAAI,WAAiBE,GAAjB,IAAG+B,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OACd,cAAC,IAAD,CAEEvC,MAAOsC,EACPlC,MAAOmC,EACPrC,UAAS,qBAAgBK,IAHpBA,WAQXsB,GACA,cAAC,IAAD,CACEC,MAAM,kBACNU,SAAUjB,IAAQI,GAFpB,SAIGc,YAAWd,EAAgB,GAAIe,QAGlCnB,IAAQK,IACR,cAAC,IAAD,CAASE,MAAM,OAAf,SACGa,YAAcf,e,wDCjFdgB,IAda,SAAAjC,GAAU,IAC5BkC,EAAalC,EAAbkC,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACpC,GAAW,IAE/BmB,EAKEnB,EALFmB,MACAkB,EAIErC,EAJFqC,WACAR,EAGE7B,EAHF6B,SACAS,EAEEtC,EAFFsC,QACAJ,EACElC,EADFkC,SAN8B,EASIK,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGrB,EACAwB,IAAWH,GAAYI,QAG1BzB,EAGJ,OACE,cAAC,IAAkB0B,SAAnB,CAA4BpD,MAAOgD,EAAnC,SACE,cAAC,IAAD,CACEtB,MAAOuB,EACPP,UAAWW,IAAG,mBAAoBN,GAClCH,WAAYA,EACZR,SAAUA,EACVS,QAASA,EALX,SAOGJ,S,iCCjDT,yFAGa7B,EAAoB,SAAAH,GAAI,OAAIC,IAAID,EAAK6C,MAAM,oBAAqB,IAEhExC,EAAiB,SAAAL,GAAI,OAAIC,IAAID,EAAK6C,MAAM,iBAAkB","file":"static/js/22.7b9487ad.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue\n        label=\"ARN\"\n        valuePath=\"arn\"\n      />\n      <PartialValue\n        label=\"VPC\"\n        valuePath=\"vpc\"\n      />\n      <PartialValue\n        label=\"DNS\"\n        valuePath=\"DNSName\"\n      />\n      <PartialValue\n        label=\"Scheme\"\n        valuePath=\"Scheme\"\n        errorPath=\"load_balancer_scheme\"\n      />\n      <PartialValue\n        label=\"Type\"\n        valuePath=\"Type\"\n      />\n      <PartialValue\n        label=\"Availability zones\"\n        valuePath=\"AvailabilityZones\"\n        renderValue={value => (\n          <ul>\n            {value.map((zone, i) => (\n              <li key={i}>\n                {`${zone.ZoneName} (${zone.SubnetId})`}\n              </li>\n            ))}\n          </ul>\n        )}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { useAPI } from '../../../api/useAPI';\nimport { getRawEndpoint } from '../../../api/paths';\nimport { getRegionFromPath, getVpcFromPath } from '../../../utils/Api';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { \n  partialDataShape,\n  renderList,\n  renderSecurityGroupLink,\n  renderAwsTags,\n} from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst ElbV2 = props => {\n  const { data } = props;\n\n  const path = get(data, ['item', 'path'], '');\n  const region = getRegionFromPath(path);\n  const vpcId = getVpcFromPath(path);\n\n  const { data: vpc, loading } = useAPI(\n    getRawEndpoint(`services.elbv2.regions.${region}.vpcs.${vpcId}.name`)\n  );\n\n  if (!data || loading) return null;\n\n  if (!isEmpty(vpc)) {\n    data.item.vpc = `${vpc} (${vpcId})`;\n  }\n\n  const listeners = get(data, ['item', 'listeners'], {});\n  const attributes = get(data, ['item', 'attributes'], []);\n  const securityGroups = get(data, ['item', 'security_groups'], {});\n  const tags = get(data, ['item', 'tags'], []);\n  const isNetwork = get(data, ['item', 'isNetwork']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <div>\n        <TabsMenu>\n          <TabPane title=\"Listeners\">\n            <ul>\n              {Object.entries(listeners).map(([port, listener], i) => (\n                <li key={i}>\n                  <PartialValue\n                    value={{\n                      port,\n                      ...listener,\n                    }}\n                    errorPath={`listeners.${port}`}\n                    renderValue={value => value.SslPolicy ? (\n                      <>\n                        {`${value.port} (${value.Protocol}, `}\n                        <PartialValue\n                          value={value.SslPolicy}\n                          errorPath={`listeners.${value.port}.SslPolicy`}\n                          inline\n                        />\n                        {')'}\n                      </>\n                    ) : (\n                      `${value.port} (${value.Protocol})`\n                    )}\n                  />\n                </li>\n              ))}\n            </ul>\n          </TabPane>\n          <TabPane title=\"Attributes\">\n            <div>\n              {attributes.map(({ Key, Value }, i) => (\n                <PartialValue \n                  key={i}\n                  label={Key}\n                  value={Value}\n                  errorPath={`attributes.${i}`}\n                />\n              ))}\n            </div>\n          </TabPane>\n          {!isNetwork && (\n            <TabPane\n              title=\"Security Groups\"\n              disabled={isEmpty(securityGroups)}\n            >\n              {renderList(securityGroups, '', renderSecurityGroupLink)}\n            </TabPane>\n          )}\n          {!isEmpty(tags) && (\n            <TabPane title=\"Tags\">\n              {renderAwsTags(tags)}\n            </TabPane>\n          )}\n        </TabsMenu>\n      </div>\n    </Partial>\n  );\n};\n\nElbV2.propTypes = propTypes;\n\nexport default ElbV2;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import get from 'lodash/get';\n\n\nexport const getRegionFromPath = path => get(path.match(/regions\\.([^.]*)/), 1);\n\nexport const getVpcFromPath = path => get(path.match(/vpcs\\.([^.]*)/), 1);\n"],"sourceRoot":""}