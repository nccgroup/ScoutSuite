{"version":3,"sources":["partials/aws/redshift.regions.id.vpcs.id.clusters.id/Informations/index.js","partials/aws/redshift.regions.id.vpcs.id.clusters.id/index.js","components/Partial/context.js","components/Exceptions/AddButton/index.js","components/Partial/PartialValue/index.js","components/Partial/PartialSection/index.js","components/Partial/Wrapper/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["Informations","label","valuePath","renderValue","formatDate","value","map","group","i","ParameterGroupName","Clusters","props","data","vpcGroups","get","clusterGroups","title","Address","Port","isEmtpy","VpcSecurityGroupId","Status","ClusterSecurityGroupName","defaultValues","path_to_issue","item","PartialContext","React","createContext","PartialPathContext","PartialTabContext","AddException","service","finding","path","useContext","ExceptionsContext","exceptions","addException","enqueueSnackbar","useSnackbar","exist","includes","Tooltip","placement","arrow","Button","disabled","size","startIcon","className","onClick","variant","anchorOrigin","vertical","horizontal","PartialValue","fullErrorPaths","separator","errorPath","inline","tooltip","tooltipProps","basePathOverwrite","params","useParams","ctx","basePath","setIssueLevel","fullValuePath","concatPaths","String","isArray","hasError","some","path_to_issues","level","useEffect","undefined","exceptionButton","content","cx","DetailedValue","defaultProps","enterDelay","PartialSection","children","Provider","PartialWrapper","console","info","InformationsWrapper","PartialTabPane","isSelected","useState","issueLevel","renderedTitle","SEVERITIES","icon"],"mappings":"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","file":"static/js/26.98ca7902.chunk.js","sourcesContent":["import React from 'react';\n\nimport { PartialValue } from '../../../../components/Partial/index';\nimport { formatDate } from '../../../../utils/Partials';\n\n\nconst Informations = () => {\n  return (\n    <>\n      <PartialValue \n        label=\"ARN\" \n        valuePath=\"arn\" \n      />\n      <PartialValue \n        label=\"Node Type\" \n        valuePath=\"NodeType\" \n      />\n      <PartialValue \n        label=\"Allow Version Upgrade\" \n        valuePath=\"AllowVersionUpgrade\" \n      />\n      <PartialValue \n        label=\"Automated Snapshot Retention Period\" \n        valuePath=\"AutomatedSnapshotRetentionPeriod\"\n      />\n      <PartialValue \n        label=\"Creation Time\" \n        valuePath=\"ClusterCreateTime\" \n        renderValue={formatDate}\n      />\n      <PartialValue \n        label=\"Availability Zone\" \n        valuePath=\"AvailabilityZone\"\n      />\n      <PartialValue \n        label=\"Encrypted\" \n        valuePath=\"Encrypted\"\n      />\n      <PartialValue \n        label=\"Cluster Parameter Groups\" \n        valuePath=\"ClusterParameterGroups\" \n        renderValue={value => (\n          <ul>\n            {value.map((group, i) => (\n              <li key={i}>\n                {group.ParameterGroupName}\n              </li>\n            ))}\n          </ul>\n        )}\n      />\n    </>\n  );\n};\n\nexport default Informations;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmtpy from 'lodash/isEmpty';\n\nimport { partialDataShape, } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Informations from './Informations';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Clusters = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const vpcGroups = get(data, ['item', 'VpcSecurityGroups']);\n  const clusterGroups = get(data, ['item', 'ClusterSecurityGroups']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <Informations />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Network\">\n          <div>\n            <PartialValue \n              label=\"Endpoint\"\n              valuePath=\"Endpoint\"\n              renderValue={value => `${value.Address}:${value.Port}`}\n            />\n            <PartialValue \n              label=\"Publicly Accessible\"\n              valuePath=\"PubliclyAccessible\"\n            />\n            <PartialValue \n              label=\"VPC\"\n              valuePath=\"VpcId\"\n            />\n            <PartialValue \n              label=\"Subnet\"\n              valuePath=\"ClusterSubnetGroupName\"\n            />\n            {!(isEmtpy(vpcGroups) && isEmtpy(clusterGroups)) && (\n              <PartialValue\n                label=\"Security Groups\"\n                renderValue={() => (\n                  <>\n                    <ul>\n                      {vpcGroups.map((group, i) => (\n                        <li key={i}>\n                          {`${group.VpcSecurityGroupId} ${group.Status}`}\n                        </li>\n                      ))}\n                    </ul>\n                    <ul>\n                      {clusterGroups.map((group, i) => (\n                        <li key={i}>\n                          {`${group.ClusterSecurityGroupName} ${group.Status}`}\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                )}\n              />\n            )}\n          </div>\n        </TabPane>\n      </TabsMenu> \n    </Partial>\n  );\n};\n\nClusters.propTypes = propTypes;\n\nexport default Clusters;\n","import React from 'react';\n\nconst defaultValues = {\n  path_to_issue: [],\n  item: {}\n};\n\nexport const PartialContext = React.createContext(defaultValues);\nexport const PartialPathContext = React.createContext('');\nexport const PartialTabContext = React.createContext(() => {});\n","import React, { useContext } from 'react';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport { PropTypes } from 'prop-types';\nimport { useSnackbar } from 'notistack';\nimport get from 'lodash/get';\n\nimport { ExceptionsContext } from '../context';\n\nconst propTypes = {\n  service: PropTypes.string.isRequired,\n  finding: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nconst AddException = ({ service, finding, path }) => {\n  const { exceptions, addException } = useContext(ExceptionsContext);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const add = () => {\n    addException(service, finding, path);\n    enqueueSnackbar(\n      'Exception added. Don\\'t forget to export the exceptions!',\n      {\n        variant: 'success',\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right',\n        },\n      },\n    );\n  };\n\n  const exist = get(exceptions, [service, finding], []).includes(path);\n\n  return (\n    <Tooltip\n      title=\"Add to exception list\" placement=\"top\"\n      arrow>\n      <Button\n        disabled={exist}\n        size=\"small\"\n        startIcon={<AddIcon />}\n        className=\"exception-btn\"\n        onClick={add}\n      >\n        Add\n      </Button>\n    </Tooltip>\n  );\n};\n\nAddException.propTypes = propTypes;\n\nexport default AddException;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport cx from 'classnames';\nimport get from 'lodash/get';\nimport isArray from 'lodash/isArray';\n\nimport {\n  PartialContext,\n  PartialPathContext,\n  PartialTabContext,\n} from '../context';\nimport { concatPaths } from '../../../utils/Partials';\nimport DetailedValue from '../../DetailedValue';\n\nimport './style.scss';\nimport AddException from '../../Exceptions/AddButton/index';\nimport { useParams } from 'react-router-dom';\n\nconst propTypes = {\n  label: PropTypes.node,\n  separator: PropTypes.string,\n  value: PropTypes.any,\n  valuePath: PropTypes.string,\n  errorPath: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  inline: PropTypes.bool,\n  className: PropTypes.string,\n  tooltip: PropTypes.bool,\n  tooltipProps: PropTypes.object,\n  renderValue: PropTypes.func,\n  basePathOverwrite: PropTypes.string,\n};\n\nconst defaultProps = {\n  label: '',\n  separator: ': ',\n  value: null,\n  valuePath: null,\n  errorPath: null,\n  inline: false,\n  tooltip: false,\n  tooltipProps: {\n    enterDelay: 1000,\n    placement: 'top-start',\n  },\n  renderValue: value => value,\n};\n\nconst PartialValue = props => {\n  const {\n    label,\n    separator,\n    valuePath,\n    errorPath,\n    className,\n    inline,\n    tooltip,\n    tooltipProps,\n    renderValue,\n    basePathOverwrite,\n  } = props;\n\n  const params = useParams();\n  const ctx = useContext(PartialContext);\n  const basePath = useContext(PartialPathContext);\n  const setIssueLevel = useContext(PartialTabContext);\n\n  const fullValuePath = concatPaths(basePathOverwrite || basePath, valuePath);\n  let value = renderValue(\n    props.value || get(ctx.item, fullValuePath, props.value),\n  );\n\n  if (typeof value === 'boolean') {\n    value = String(value);\n  }\n\n  let fullErrorPaths;\n  if (errorPath) {\n    const paths = isArray(errorPath) ? errorPath : [errorPath];\n    fullErrorPaths = paths.map(path =>\n      concatPaths(basePathOverwrite || basePath, path),\n    );\n  } else {\n    fullErrorPaths = [fullValuePath];\n  }\n\n  const hasError = fullErrorPaths.some(path =>\n    ctx.path_to_issues.includes(path),\n  );\n  const level = ctx.level;\n\n  useEffect(() => {\n    if (hasError) {\n      setIssueLevel(level);\n    }\n  }, [level]);\n\n  if (value === undefined || value === null) {\n    return null;\n  }\n\n  const exceptionButton = (\n    <AddException\n      service={params.service} finding={params.finding}\n      path={`${ctx.path}.${fullErrorPaths[0]}`} />\n  );\n\n  const content = (\n    <span className={cx(hasError && cx('issue', level))}>\n      {value}\n      {hasError && exceptionButton}\n    </span>\n  );\n\n  return (\n    <DetailedValue\n      className={cx(className, 'partial-value', { inline })}\n      label={label}\n      separator={separator}\n      value={\n        tooltip ? (\n          <Tooltip title={value} {...tooltipProps}>\n            {content}\n          </Tooltip>\n        ) : (\n          content\n        )\n      }\n    />\n  );\n};\n\nPartialValue.propTypes = propTypes;\nPartialValue.defaultProps = defaultProps;\n\nexport default PartialValue;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialPathContext } from '../context';\nimport { concatPaths } from '../../../utils/Partials';\n\nconst propTypes = {\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialSection = (props) => {\n  const { path, children } = props;\n\n  const basePath = useContext(PartialPathContext);\n\n  return (\n    <PartialPathContext.Provider value={concatPaths(basePath, path)}>\n      {children}\n    </PartialPathContext.Provider>\n  );\n};\n\nPartialSection.propTypes = propTypes;\n\nexport default PartialSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PartialContext } from '../context';\nimport { partialDataShape } from '../../../utils/Partials';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nconst PartialWrapper = (props) => {\n  const { data, children } = props;\n\n  console.info('PARTIAL DATA', data);\n\n  return (\n    <PartialContext.Provider value={data}>\n      {children}\n    </PartialContext.Provider>\n  );\n};\n\nPartialWrapper.propTypes = propTypes;\n\nexport default PartialWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}