{"version":3,"sources":["partials/azure/aad.users.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","api/useResources.js"],"names":["renderGroups","groups","renderList","group","service","resource","id","name","renderGroup","Users","props","data","item","useResources","label","valuePath","renderValue","valueOrNone","convertBoolToEnable","title","InformationsWrapper","children","className","PartialTabPane","isSelected","disabled","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx","ids","setData","loading","setLoading","useEffect","a","requests","map","API","Promise","all","response","console","info","error","message","asyncAPI"],"mappings":"mLAeMA,EAAe,SAAAC,GASnB,OAAOC,YAAWD,EAAQ,IAAI,SAAAE,GAAK,OARf,SAAAA,GAAK,OACvB,cAAC,IAAD,CACEC,QAAQ,MACRC,SAAS,SACTC,GAAIH,EAAMG,GACVC,KAAMJ,EAAMI,OAGuBC,CAAYL,OA+FtCM,UAvFD,SAAAC,GAAU,IACdC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACAX,EAAWY,YAAa,MAAO,SAAUD,EAAKX,QAApDU,KAER,OAAKA,EAGH,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,MAAM,iBACNC,UAAU,OACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,eACNC,UAAU,eACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,aACNC,UAAU,aACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,UACNC,UAAU,UACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,gBACNC,UAAU,gBACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,OAAOC,UAAU,OACvBC,YAAaC,MAEf,cAAC,IAAD,CACEH,MAAM,gBACNC,UAAU,gBACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,OACNC,UAAU,YACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,SACNC,UAAU,kBACVC,YAAaE,MAGf,cAAC,IAAD,CACEJ,MAAM,iBACNC,UAAU,iBACVC,YAAaC,MAGf,cAAC,IAAD,CACEH,MAAM,qBACNC,UAAU,qBACVC,YAAaC,SAIjB,cAAC,IAAD,UACE,cAAC,IAAD,CACEE,MAAM,SADR,SAGGnB,EAAaC,UA1EJ,O,wDCZLmB,IAda,SAAAV,GAAU,IAC5BW,EAAaX,EAAbW,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,qNCyCQE,G,OAtCQ,SAACb,GAAW,IAE/BS,EAKET,EALFS,MACAK,EAIEd,EAJFc,WACAC,EAGEf,EAHFe,SACAC,EAEEhB,EAFFgB,QACAL,EACEX,EADFW,SAN8B,EASIM,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGT,EACAY,IAAWH,GAAYI,QAG1Bb,EAGJ,OACE,cAAC,IAAkBc,SAAnB,CAA4BC,MAAOL,EAAnC,SACE,cAAC,IAAD,CACEV,MAAOW,EACPR,UAAWa,IAAG,mBAAoBP,GAClCJ,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGL,S,uHC1CIR,EAAe,SAACT,EAASC,EAAU+B,GAAS,IAAD,EAC9BT,mBAAS,IADqB,mBAC/ChB,EAD+C,KACzC0B,EADyC,OAExBV,oBAAS,GAFe,mBAE/CW,EAF+C,KAEtCC,EAFsC,KAwBtD,OApBAC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,2DACXrC,GAAWC,GAAY+B,GADZ,wBAEbG,GAAW,GAFE,SAILG,EAAWN,EAAIO,KAAI,SAAArC,GAAE,OACzBsC,IAAA,mBAAoBxC,EAApB,sBAAyCC,EAAzC,YAAqDC,OAL5C,SAOYuC,QAAQC,IAAIJ,GAPxB,OAOLK,EAPK,OAQXC,QAAQC,KAAK,wBAAyB7C,EAASC,EAAU+B,EAAKW,GAC9DV,EAAQU,GATG,kDAWXC,QAAQE,MAAM,KAAEC,SAXL,QAabZ,GAAW,GAbE,0DAAH,qDAgBda,KACC,CAAChB,IAEG,CACLzB,OACA2B","file":"static/js/29.0aad9edf.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport {\n  partialDataShape,\n  valueOrNone,\n  convertBoolToEnable,\n} from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport { renderList } from '../../../utils/Partials/index';\nimport ResourceLink from '../../../components/ResourceLink/index';\nimport { useResources } from '../../../api/useResources';\n\nconst renderGroups = groups => {\n  const renderGroup = group => (\n    <ResourceLink\n      service=\"aad\"\n      resource=\"groups\"\n      id={group.id}\n      name={group.name}\n    />\n  );\n  return renderList(groups, '', group => renderGroup(group));\n};\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n  item: PropTypes.object,\n};\n\nconst Users = props => {\n  const { data, item } = props;\n  const { data: groups } = useResources('aad', 'groups', item.groups);\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Principal Name\"\n          valuePath=\"name\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Display Name\"\n          valuePath=\"display_name\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Given Name\"\n          valuePath=\"given_name\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Surname\"\n          valuePath=\"surname\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Mail Nickname\"\n          valuePath=\"mail_nickname\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Mail\" valuePath=\"mail\"\n          renderValue={valueOrNone} />\n\n        <PartialValue\n          label=\"Sign-In Names\"\n          valuePath=\"sign_in_names\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Type\"\n          valuePath=\"user_type\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Status\"\n          valuePath=\"account_enabled\"\n          renderValue={convertBoolToEnable}\n        />\n\n        <PartialValue\n          label=\"Usage Location\"\n          valuePath=\"usage_location\"\n          renderValue={valueOrNone}\n        />\n\n        <PartialValue\n          label=\"Deletion Timestamp\"\n          valuePath=\"deletion_timestamp\"\n          renderValue={valueOrNone}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane\n          title=\"Groups\"\n        >\n          {renderGroups(groups)}\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nUsers.propTypes = propTypes;\n\nexport default Users;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import { useEffect, useState } from 'react';\nimport * as API from './api';\n\n/**\n * React Hook to fetch API data and re-render the component\n * @param {*} path\n */\nexport const useResources = (service, resource, ids) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const asyncAPI = async () => {\n      if (service && resource && ids) {\n        setLoading(true);\n        try {\n          const requests = ids.map(id =>\n            API.get(`services/${service}/resources/${resource}/${id}`),\n          );\n          const response = await Promise.all(requests);\n          console.info('useResources response', service, resource, ids, response);\n          setData(response);\n        } catch (e) {\n          console.error(e.message);\n        }\n        setLoading(false);\n      }\n    };\n    asyncAPI();\n  }, [ids]);\n\n  return {\n    data,\n    loading,\n  };\n};\n"],"sourceRoot":""}