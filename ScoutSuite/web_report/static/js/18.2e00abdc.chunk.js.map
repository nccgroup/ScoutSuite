{"version":3,"sources":["partials/aws/sns.regions.id.topics.id/index.js","components/InformationsWrapper/index.js","components/Partial/PartialTabs/PartialTabPane/index.js","components/Partial/Policy/index.js"],"names":["Topics","props","data","controlPolicy","get","deliveryPolicy","effectiveDeliveryPolicy","subscriptions","label","valuePath","title","disabled","isEmpty","policy","policyPath","protocol","Object","entries","map","i","name","topics","topic","Endpoint","InformationsWrapper","children","className","PartialTabPane","isSelected","onClick","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","value","cx","Policy","defaultOpen","hasError","useContext","PartialContext","path_to_issues","some","path","includes","policyTitle","renderJson","json","errorPath","object","JSON","stringify","replace","renderValue","renderWithInnerHtml","policyContent","key","trigger","fontSize","triggerWhenOpen","transitionTime","open","size","defaultExpanded","expandIcon","defaultProps"],"mappings":"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","file":"static/js/18.2e00abdc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { partialDataShape,  } from '../../../utils/Partials';\nimport { Partial, PartialValue } from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport Policy from '../../../components/Partial/Policy';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst Topics = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const controlPolicy = get(data, ['item', 'Policy']);\n  const deliveryPolicy = get(data, ['item', 'DeliveryPolicy']);\n  const effectiveDeliveryPolicy = get(data, ['item', 'EffectiveDeliveryPolicy']);\n  const subscriptions = get(data, ['item', 'subscriptions']);\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue\n          label=\"Region\"\n          valuePath=\"region\"\n        />\n        <PartialValue\n          label=\"ARN\"\n          valuePath=\"arn\"\n        />\n        <PartialValue\n          label=\"Display Name\"\n          valuePath=\"DisplayName\"\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane \n          title=\"Access Control Policy\"\n          disabled={isEmpty(controlPolicy)}\n        >\n          <Policy \n            policy={controlPolicy}\n            policyPath=\"Policy\"\n          />\n        </TabPane>\n        <TabPane \n          title=\"Delivery Policy\"\n          disabled={isEmpty(deliveryPolicy)}\n        >\n          <Policy \n            policy={deliveryPolicy}\n            policyPath=\"DeliveryPolicy\"\n          />\n        </TabPane>\n        <TabPane \n          title=\"Effective Delivery Policy\"\n          disabled={isEmpty(effectiveDeliveryPolicy)}\n        >\n          <Policy \n            policy={effectiveDeliveryPolicy}\n            policyPath=\"EffectiveDeliveryPolicy\"\n          />\n        </TabPane>\n        <TabPane \n          title=\"Subscriptions\"\n          disabled={isEmpty(subscriptions.protocol)}\n        >\n          <ul>\n            {Object.entries(subscriptions.protocol).map(([name, topics], i) => (\n              <div key={i}>\n                <li>{name}</li>\n                <ul>\n                  {topics.map((topic, i) => (\n                    <li key={i}>\n                      {`Endpoint: ${topic.Endpoint}`}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </ul>\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nTopics.propTypes = propTypes;\n\nexport default Topics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Collapsible from 'react-collapsible';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport size from 'lodash/size';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { PartialContext } from '../context';\nimport PartialValue from '../PartialValue';\nimport { renderWithInnerHtml } from '../../../utils/Partials';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  name: PropTypes.string,\n  policy: PropTypes.object.isRequired,\n  policyPath: PropTypes.string,\n  defaultOpen: PropTypes.bool,\n};\n\nconst defaultProps = {\n  defaultOpen: false,\n};\n\nconst Policy = props => {\n  const { \n    name, \n    policy, \n    policyPath,\n    defaultOpen,\n  } = props;\n\n  const { path_to_issues } = useContext(PartialContext);\n  const hasError = path_to_issues.some(path => path.includes(policyPath));\n\n  if (isEmpty(policy)) return null;\n\n  const policyTitle = (\n    <h4 className=\"policy-title\">\n      {name}\n    </h4>\n  );\n\n  const displayJson = object => \n    JSON.stringify(object, null, 2)\n      .replace(/ /gm, '&nbsp;')\n      .replace(/\\n/gm, '<br/>');\n\n  const renderJson = (json, errorPath) => (\n    <PartialValue \n      value={displayJson(json)}\n      errorPath={errorPath}\n      renderValue={value => (\n        renderWithInnerHtml(\n          value,\n        )\n      )}\n    />\n  );\n\n  const policyContent = (\n    <code>\n      {'{'}\n      {Object.entries(policy).map(([key, value], i) => (\n        <div \n          key={i}\n          className={cx({ 'inline': typeof(value) === 'string' })}\n        >\n          {`\"${key}\":\\xa0`}\n          {key === 'Statement' ? (\n            <>\n              [<br/>\n              {value.map((object, i) => (\n                <Collapsible\n                  key={i}\n                  trigger={\n                    <>\n                      <ExpandMoreIcon fontSize=\"inherit\"/>\n                      <span>{'{...}'}</span>\n                    </>\n                  }\n                  triggerWhenOpen={\n                    <ExpandLessIcon fontSize=\"inherit\"/>\n                  }\n                  transitionTime={1}\n                  open={true}\n                >\n                  {renderJson(object, `${policyPath}.Statement.${i}`)}\n                </Collapsible>\n              ))}\n              ]\n            </>\n          ) : (\n            <>\n              {renderJson(value)}\n            </>\n          )}\n          {i < size(policy) - 1 && ','}\n          <br/>\n        </div>    \n      ))}\n      {'}'}\n    </code>\n  );\n\n  return (\n    <div className=\"policy\">\n      {name ? (\n        <Accordion\n          defaultExpanded={defaultOpen || hasError}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon/>}\n          >\n            {policyTitle}\n          </AccordionSummary>\n          <AccordionDetails>\n            {policyContent}\n          </AccordionDetails>\n        </Accordion>\n      ) : (\n        policyContent\n      )}\n    </div>\n  );\n};\n\nPolicy.propTypes = propTypes;\nPolicy.defaultProps = defaultProps;\n\nexport default Policy;\n"],"sourceRoot":""}