{"version":3,"sources":["partials/gcp/computeengine.projects.id.regions.id.subnetworks.id/index.js","components/InformationsWrapper/index.js","api/useResources.js"],"names":["Subnetworks","props","items","data","item","get","instanceList","useMemo","instances","map","instance_id","useResources","instancesLoading","loading","label","valuePath","renderValue","formatDate","convertBoolToEnable","title","path","length","i","service","resource","id","name","InformationsWrapper","children","className","ids","useState","setData","setLoading","useEffect","a","requests","API","Promise","all","response","console","info","error","message","asyncAPI"],"mappings":"4MAyGeA,UA7DK,SAAAC,GAAU,IApBNC,EAqBdC,EAASF,EAATE,KACFC,EAAOC,IAAIF,EAAM,CAAC,QAAS,IAE3BG,EAAeC,mBACnB,kBACEH,EAAKI,UACDJ,EAAKI,UAAUC,KAAI,qBAAGC,eACtB,KACN,CAACP,IATwB,EAW4BQ,YACrD,gBACA,YACAL,GAHYE,EAXa,EAWnBL,KAA0BS,EAXP,EAWFC,QAMzB,OAAKV,EAGH,eAAC,IAAD,CAASA,KAAMA,EAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAcW,MAAM,OAAOC,UAAU,SAErC,cAAC,IAAD,CAAcD,MAAM,KAAKC,UAAU,OAEnC,cAAC,IAAD,CAAcD,MAAM,aAAaC,UAAU,eAE3C,cAAC,IAAD,CAAcD,MAAM,SAASC,UAAU,WAEvC,cAAC,IAAD,CACED,MAAM,gBACNC,UAAU,qBACVC,YAAaC,MAGf,cAAC,IAAD,CAAcH,MAAM,WAAWC,UAAU,aAEzC,cAAC,IAAD,CAAcD,MAAM,kBAAkBC,UAAU,oBAEhD,cAAC,IAAD,CACED,MAAM,wBACNC,UAAU,2BACVC,YAAaE,SAIjB,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,MAAM,2BAAf,SACE,eAAC,IAAD,CAAgBC,KAAK,YAArB,WArEclB,EAsEKM,EArEtBN,GAA0B,IAAjBA,EAAMmB,OAGlB,6BACGnB,EAAMO,KAAI,SAACL,EAAMkB,GAAP,OACT,6BACE,cAAC,IAAD,CACEC,QAAQ,gBACRC,SAAS,YACTC,GAAIrB,EAAKqB,GACTC,KAAMtB,EAAKsB,MACNtB,EAAKqB,KANLH,QAL0B,yCAsE9BV,GAAoB,cAAC,IAAD,cAlCb,O,wDCrCLe,IAda,SAAA1B,GAAU,IAC5B2B,EAAa3B,EAAb2B,SAER,OACE,sBAAKC,UAAU,uBAAf,UACE,oBAAIA,UAAU,QAAd,0BACCD,O,6ICTMjB,EAAe,SAACY,EAASC,EAAUM,GAAS,IAAD,EAC9BC,mBAAS,IADqB,mBAC/C5B,EAD+C,KACzC6B,EADyC,OAExBD,oBAAS,GAFe,mBAE/ClB,EAF+C,KAEtCoB,EAFsC,KAwBtD,OApBAC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,2DACXZ,GAAWC,GAAYM,GADZ,wBAEbG,GAAW,GAFE,SAILG,EAAWN,EAAIrB,KAAI,SAAAgB,GAAE,OACzBY,IAAA,mBAAoBd,EAApB,sBAAyCC,EAAzC,YAAqDC,OAL5C,SAOYa,QAAQC,IAAIH,GAPxB,OAOLI,EAPK,OAQXC,QAAQC,KAAK,wBAAyBnB,EAASC,EAAUM,EAAKU,GAC9DR,EAAQQ,GATG,kDAWXC,QAAQE,MAAM,KAAEC,SAXL,QAabX,GAAW,GAbE,0DAAH,qDAgBdY,KACC,CAACf,IAEG,CACL3B,OACAU","file":"static/js/54.3875344c.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport {\n  Partial,\n  PartialSection,\n  PartialValue,\n} from '../../../components/Partial';\nimport { TabsMenu, TabPane } from '../../../components/Tabs';\nimport {\n  partialDataShape,\n  formatDate,\n  convertBoolToEnable,\n} from '../../../utils/Partials';\nimport { useResources } from '../../../api/useResources';\nimport InformationsWrapper from '../../../components/InformationsWrapper';\nimport ResourceLink from '../../../components/ResourceLink/index';\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst renderInstances = items => {\n  if (!items || items.length === 0) return <span>None</span>;\n\n  return (\n    <ul>\n      {items.map((item, i) => (\n        <li key={i}>\n          <ResourceLink\n            service=\"computeengine\"\n            resource=\"instances\"\n            id={item.id}\n            name={item.name}\n            key={item.id}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst Subnetworks = props => {\n  const { data } = props;\n  const item = get(data, ['item'], {});\n\n  const instanceList = useMemo(\n    () =>\n      item.instances\n        ? item.instances.map(({ instance_id }) => instance_id)\n        : [],\n    [data],\n  );\n  const { data: instances, loading: instancesLoading } = useResources(\n    'computeengine',\n    'instances',\n    instanceList,\n  );\n\n  if (!data) return null;\n\n  return (\n    <Partial data={data}>\n      <InformationsWrapper>\n        <PartialValue label=\"Name\" valuePath=\"name\" />\n\n        <PartialValue label=\"ID\" valuePath=\"id\" />\n\n        <PartialValue label=\"Project ID\" valuePath=\"project_id\" />\n\n        <PartialValue label=\"Region\" valuePath=\"region\" />\n\n        <PartialValue\n          label=\"Creation Date\"\n          valuePath=\"creation_timestamp\"\n          renderValue={formatDate}\n        />\n\n        <PartialValue label=\"IP Range\" valuePath=\"ip_range\" />\n\n        <PartialValue label=\"Gateway Address\" valuePath=\"gateway_address\" />\n\n        <PartialValue\n          label=\"Private Google Access\"\n          valuePath=\"private_ip_google_access\"\n          renderValue={convertBoolToEnable}\n        />\n      </InformationsWrapper>\n\n      <TabsMenu>\n        <TabPane title=\"Compute Engine Instances\">\n          <PartialSection path=\"instances\">\n            {renderInstances(instances)}\n            {instancesLoading && <Skeleton />}\n          </PartialSection>\n        </TabPane>\n      </TabsMenu>\n    </Partial>\n  );\n};\n\nSubnetworks.propTypes = propTypes;\n\nexport default Subnetworks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst InformationsWrapper = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"informations-wrapper\">\n      <h4 className=\"title\">Informations</h4>\n      {children}\n    </div>\n  );\n};\n\n\nInformationsWrapper.propTypes = propTypes;\n\nexport default InformationsWrapper;\n","import { useEffect, useState } from 'react';\nimport * as API from './api';\n\n/**\n * React Hook to fetch API data and re-render the component\n * @param {*} path\n */\nexport const useResources = (service, resource, ids) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const asyncAPI = async () => {\n      if (service && resource && ids) {\n        setLoading(true);\n        try {\n          const requests = ids.map(id =>\n            API.get(`services/${service}/resources/${resource}/${id}`),\n          );\n          const response = await Promise.all(requests);\n          console.info('useResources response', service, resource, ids, response);\n          setData(response);\n        } catch (e) {\n          console.error(e.message);\n        }\n        setLoading(false);\n      }\n    };\n    asyncAPI();\n  }, [ids]);\n\n  return {\n    data,\n    loading,\n  };\n};\n"],"sourceRoot":""}