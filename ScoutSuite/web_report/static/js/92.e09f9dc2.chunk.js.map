{"version":3,"sources":["partials/aws/elb.regions.id.elb_policies.id/index.js","components/Partial/PartialTabs/PartialTabPane/index.js"],"names":["ELBs","props","data","protocols","get","options","ciphers","attributes","isSslPolicy","renderEntries","entry","map","i","key","value","label","title","Object","entries","filter","x","AttributeName","AttributeValue","PartialTabPane","isSelected","disabled","onClick","children","useState","issueLevel","setIssueLevel","renderedTitle","SEVERITIES","icon","Provider","className","cx"],"mappings":"0LAoEeA,UAtDF,SAAAC,GAAU,IACbC,EAASD,EAATC,KAER,IAAKA,EAAM,OAAO,KAElB,IAAMC,EAAYC,IAAIF,EAAM,CAAC,OAAQ,aAAc,IAC7CG,EAAUD,IAAIF,EAAM,CAAC,OAAQ,WAAY,IACzCI,EAAUF,IAAIF,EAAM,CAAC,OAAQ,WAAY,IACzCK,EAAaH,IAAIF,EAAM,CAAC,OAAQ,+BAAgC,IAChEM,EAAwD,6BAA1CJ,IAAIF,EAAM,CAAC,OAAQ,mBAEjCO,EAAgB,SAAAC,GAAK,OACzB,8BACGA,EAAMC,KAAI,WAAeC,GAAf,uBAAEC,EAAF,KAAOC,EAAP,YACT,cAAC,IAAD,CAEEC,MAAOF,EACPC,MAAOA,GAFFF,SAQb,OACE,cAAC,IAAD,CAASV,KAAMA,EAAf,SACGM,EACC,eAAC,IAAD,WACE,cAAC,IAAD,CAASQ,MAAM,YAAf,SACGP,EAAcQ,OAAOC,QAAQf,MAEhC,cAAC,IAAD,CAASa,MAAM,UAAf,SACGP,EAAcQ,OAAOC,QAAQb,MAEhC,cAAC,IAAD,CAASW,MAAM,UAAf,SACGP,EAAcQ,OAAOC,QAAQZ,GAC3Ba,QAAO,kBAAyB,SAAzB,6BAKd,cAAC,IAAD,UACE,cAAC,IAAD,CAASH,MAAM,aAAf,SACGP,EAAcF,EAAWI,KAAI,SAAAS,GAAC,MAAI,CACjCA,EAAEC,cAAeD,EAAEE,4B,+LCAlBC,G,OAtCQ,SAACtB,GAAW,IAE/Be,EAKEf,EALFe,MACAQ,EAIEvB,EAJFuB,WACAC,EAGExB,EAHFwB,SACAC,EAEEzB,EAFFyB,QACAC,EACE1B,EADF0B,SAN8B,EASIC,mBAAS,IATb,mBASzBC,EATyB,KASbC,EATa,KAW1BC,EAAgBF,EAElB,qCACGb,EACAgB,IAAWH,GAAYI,QAG1BjB,EAGJ,OACE,cAAC,IAAkBkB,SAAnB,CAA4BpB,MAAOgB,EAAnC,SACE,cAAC,IAAD,CACEd,MAAOe,EACPI,UAAWC,IAAG,mBAAoBP,GAClCL,WAAYA,EACZC,SAAUA,EACVC,QAASA,EALX,SAOGC","file":"static/js/92.e09f9dc2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\n\nimport { Partial } from '../../../components/Partial';\nimport { partialDataShape } from '../../../utils/Partials';\nimport { TabsMenu, TabPane } from '../../../components/Partial/PartialTabs';\nimport DetailedValue from '../../../components/DetailedValue';\n\n\nconst propTypes = {\n  data: PropTypes.shape(partialDataShape).isRequired,\n};\n\nconst ELBs = props => {\n  const { data } = props;\n\n  if (!data) return null;\n\n  const protocols = get(data, ['item', 'protocols'], {});\n  const options = get(data, ['item', 'options'], {});\n  const ciphers = get(data, ['item', 'ciphers'], {});\n  const attributes = get(data, ['item', 'PolicyAttributeDescriptions'], []);\n  const isSslPolicy = get(data, ['item', 'PolicyTypeName']) === 'SSLNegotiationPolicyType';\n\n  const renderEntries = entry => (\n    <div>\n      {entry.map(([key, value], i) => (\n        <DetailedValue\n          key={i}\n          label={key}\n          value={value}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <Partial data={data}>\n      {isSslPolicy ? (\n        <TabsMenu>\n          <TabPane title=\"Protocols\">\n            {renderEntries(Object.entries(protocols))}\n          </TabPane>\n          <TabPane title=\"Options\">\n            {renderEntries(Object.entries(options))}\n          </TabPane>\n          <TabPane title=\"Ciphers\">\n            {renderEntries(Object.entries(ciphers)\n              .filter(([, value]) => value === 'true')\n            )}\n          </TabPane>\n        </TabsMenu>\n      ) : (\n        <TabsMenu>\n          <TabPane title=\"Attributes\">\n            {renderEntries(attributes.map(x => [\n              x.AttributeName, x.AttributeValue\n            ]))}\n          </TabPane>\n        </TabsMenu>\n      )}\n    </Partial>\n  );\n};\n\nELBs.propTypes = propTypes;\n\nexport default ELBs;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { TabPane } from '../../../Tabs';\nimport { PartialTabContext } from '../../context';\nimport { SEVERITIES } from '../../../../utils/Dashboard';\n\nimport './style.scss';\n\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  isSelected: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.any.isRequired,\n};\n\nconst PartialTabPane = (props) => {\n  const {\n    title,\n    isSelected,\n    disabled,\n    onClick,\n    children,\n  } = props;\n\n  const [issueLevel, setIssueLevel] = useState('');\n\n  const renderedTitle = issueLevel \n    ? (\n      <>\n        {title}\n        {SEVERITIES[issueLevel].icon}\n      </>\n    ) : (\n      title\n    ); \n\n  return (\n    <PartialTabContext.Provider value={setIssueLevel}>\n      <TabPane \n        title={renderedTitle}\n        className={cx('partial-tab-pane', issueLevel)}\n        isSelected={isSelected}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        {children}\n      </TabPane>\n    </PartialTabContext.Provider>\n  );\n};\n\nPartialTabPane.propTypes = propTypes;\n\nexport default PartialTabPane;\n"],"sourceRoot":""}